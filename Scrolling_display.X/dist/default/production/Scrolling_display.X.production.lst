

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Dec 01 13:10:32 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 1.44
    40                           ; Generated 14/09/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F886 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001D                     	;# 
   105  001E                     	;# 
   106  001F                     	;# 
   107  0081                     	;# 
   108  0085                     	;# 
   109  0086                     	;# 
   110  0087                     	;# 
   111  0089                     	;# 
   112  008C                     	;# 
   113  008D                     	;# 
   114  008E                     	;# 
   115  008F                     	;# 
   116  0090                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0094                     	;# 
   123  0095                     	;# 
   124  0096                     	;# 
   125  0097                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  0105                     	;# 
   135  0107                     	;# 
   136  0108                     	;# 
   137  0109                     	;# 
   138  010C                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  010E                     	;# 
   142  010F                     	;# 
   143  0185                     	;# 
   144  0187                     	;# 
   145  0188                     	;# 
   146  0189                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149                           
   150                           	psect	idataBANK0
   151  0D98                     __pidataBANK0:	
   152                           
   153                           ;initializer for main@F1918
   154  0D98  3420               	retlw	32
   155  0D99  3420               	retlw	32
   156  0D9A  3420               	retlw	32
   157  0D9B  3420               	retlw	32
   158  0D9C  3400               	retlw	0
   159                           
   160                           ;initializer for _speed
   161  0D9D  3458               	retlw	88
   162  0D9E  3402               	retlw	2
   163                           
   164                           ;initializer for _button_pressed
   165  0D9F  3401               	retlw	1
   166                           
   167                           ;initializer for _character
   168  0DA0  345F               	retlw	95
   169                           
   170                           ;initializer for _buffer
   171  0DA1  3420               	retlw	32
   172  0DA2  3420               	retlw	32
   173  0DA3  3420               	retlw	32
   174  0DA4  3420               	retlw	32
   175  0DA5  3420               	retlw	32
   176  0DA6  3420               	retlw	32
   177  0DA7  3400               	retlw	0
   178                           
   179                           	psect	idataBANK1
   180  075A                     __pidataBANK1:	
   181                           
   182                           ;initializer for _message
   183  075A  3420               	retlw	32
   184  075B  3400               	retlw	0
   185  075C  3400               	retlw	0
   186  075D  3400               	retlw	0
   187  075E  3400               	retlw	0
   188  075F  3400               	retlw	0
   189  0760  3400               	retlw	0
   190  0761  3400               	retlw	0
   191  0762  3400               	retlw	0
   192  0763  3400               	retlw	0
   193  0764  3400               	retlw	0
   194  0765  3400               	retlw	0
   195  0766  3400               	retlw	0
   196  0767  3400               	retlw	0
   197  0768  3400               	retlw	0
   198  0769  3400               	retlw	0
   199  076A  3400               	retlw	0
   200  076B  3400               	retlw	0
   201  076C  3400               	retlw	0
   202  076D  3400               	retlw	0
   203  076E  3400               	retlw	0
   204  076F  3400               	retlw	0
   205  0770  3400               	retlw	0
   206  0771  3400               	retlw	0
   207  0772  3400               	retlw	0
   208  0773  3400               	retlw	0
   209  0774  3400               	retlw	0
   210  0775  3400               	retlw	0
   211  0776  3400               	retlw	0
   212  0777  3400               	retlw	0
   213  0778  3400               	retlw	0
   214  0779  3400               	retlw	0
   215  077A  3400               	retlw	0
   216  077B  3400               	retlw	0
   217  077C  3400               	retlw	0
   218  077D  3400               	retlw	0
   219  077E  3400               	retlw	0
   220  077F  3400               	retlw	0
   221  0780  3400               	retlw	0
   222  0781  3400               	retlw	0
   223  0782  3400               	retlw	0
   224  0783  3400               	retlw	0
   225  0784  3400               	retlw	0
   226  0785  3400               	retlw	0
   227  0786  3400               	retlw	0
   228  0787  3400               	retlw	0
   229  0788  3400               	retlw	0
   230  0789  3400               	retlw	0
   231  078A  3400               	retlw	0
   232  078B  3400               	retlw	0
   233  078C  3400               	retlw	0
   234  078D  3400               	retlw	0
   235  078E  3400               	retlw	0
   236  078F  3400               	retlw	0
   237  0790  3400               	retlw	0
   238  0791  3400               	retlw	0
   239  0792  3400               	retlw	0
   240  0793  3400               	retlw	0
   241  0794  3400               	retlw	0
   242  0795  3400               	retlw	0
   243  0796  3400               	retlw	0
   244  0797  3400               	retlw	0
   245  0798  3400               	retlw	0
   246  0799  3400               	retlw	0
   247  079A  3400               	retlw	0
   248  079B  3400               	retlw	0
   249  079C  3400               	retlw	0
   250  079D  3400               	retlw	0
   251  079E  3400               	retlw	0
   252  079F  3400               	retlw	0
   253  07A0  3400               	retlw	0
   254  07A1  3400               	retlw	0
   255  07A2  3400               	retlw	0
   256  07A3  3400               	retlw	0
   257  07A4  3400               	retlw	0
   258  07A5  3400               	retlw	0
   259  07A6  3400               	retlw	0
   260  07A7  3400               	retlw	0
   261  07A8  3400               	retlw	0
   262  07A9  3400               	retlw	0
   263                           
   264                           	psect	idataBANK3
   265  0DFC                     __pidataBANK3:	
   266                           
   267                           ;initializer for _greeting_message
   268  0DFC  3441               	retlw	65
   269  0DFD  342D               	retlw	45
   270  0DFE  342D               	retlw	45
   271  0DFF  3457               	retlw	87
   272  0E00  3452               	retlw	82
   273  0E01  3449               	retlw	73
   274  0E02  3454               	retlw	84
   275  0E03  3445               	retlw	69
   276  0E04  3420               	retlw	32
   277  0E05  3442               	retlw	66
   278  0E06  342D               	retlw	45
   279  0E07  342D               	retlw	45
   280  0E08  3453               	retlw	83
   281  0E09  3448               	retlw	72
   282  0E0A  344F               	retlw	79
   283  0E0B  3457               	retlw	87
   284  0E0C  3420               	retlw	32
   285  0E0D  3443               	retlw	67
   286  0E0E  342D               	retlw	45
   287  0E0F  342D               	retlw	45
   288  0E10  3453               	retlw	83
   289  0E11  3454               	retlw	84
   290  0E12  344F               	retlw	79
   291  0E13  3452               	retlw	82
   292  0E14  3445               	retlw	69
   293  0E15  3420               	retlw	32
   294  0E16  3444               	retlw	68
   295  0E17  342D               	retlw	45
   296  0E18  342D               	retlw	45
   297  0E19  3445               	retlw	69
   298  0E1A  3458               	retlw	88
   299  0E1B  3449               	retlw	73
   300  0E1C  3454               	retlw	84
   301  0E1D  3420               	retlw	32
   302  0E1E  3400               	retlw	0
   303                           
   304                           	psect	strings
   305  0600                     __pstrings:	
   306  0600                     stringtab:	
   307  0600                     __stringtab:	
   308  0600                     stringcode:	
   309                           ;	String table - string pointers are 1 byte each
   310                           
   311  0600                     stringdir:	
   312  0600  3006               	movlw	high stringdir
   313  0601  008A               	movwf	10
   314  0602  0804               	movf	4,w
   315  0603  0A84               	incf	4,f
   316  0604  0782               	addwf	2,f
   317  0605                     __stringbase:	
   318  0605  3400               	retlw	0
   319  0606                     __end_of__stringtab:	
   320  0606                     _CHAR_DATA:	
   321  0606  34FF               	retlw	255
   322  0607  34FF               	retlw	255
   323  0608  3400               	retlw	0
   324  0609  3400               	retlw	0
   325  060A  3400               	retlw	0
   326  060B  3400               	retlw	0
   327  060C  3400               	retlw	0
   328  060D  3400               	retlw	0
   329  060E  3400               	retlw	0
   330  060F  3400               	retlw	0
   331  0610  3400               	retlw	0
   332  0611  3400               	retlw	0
   333  0612  3400               	retlw	0
   334  0613  3400               	retlw	0
   335  0614  3400               	retlw	0
   336  0615  3400               	retlw	0
   337  0616  3400               	retlw	0
   338  0617  3400               	retlw	0
   339  0618  3400               	retlw	0
   340  0619  3400               	retlw	0
   341  061A  3400               	retlw	0
   342  061B  3400               	retlw	0
   343  061C  3400               	retlw	0
   344  061D  3400               	retlw	0
   345  061E  3400               	retlw	0
   346  061F  3400               	retlw	0
   347  0620  343F               	retlw	63
   348  0621  34FF               	retlw	255
   349  0622  3400               	retlw	0
   350  0623  3400               	retlw	0
   351  0624  3400               	retlw	0
   352  0625  3400               	retlw	0
   353  0626  34F6               	retlw	246
   354  0627  3400               	retlw	0
   355  0628  34F7               	retlw	247
   356  0629  34CF               	retlw	207
   357  062A  343F               	retlw	63
   358  062B  3411               	retlw	17
   359  062C  34BF               	retlw	191
   360  062D  3403               	retlw	3
   361  062E  343F               	retlw	63
   362  062F  34CE               	retlw	206
   363  0630  343F               	retlw	63
   364  0631  3422               	retlw	34
   365  0632  343F               	retlw	63
   366  0633  3420               	retlw	32
   367  0634  3436               	retlw	54
   368  0635  343F               	retlw	63
   369  0636  343F               	retlw	63
   370  0637  3400               	retlw	0
   371  0638  343F               	retlw	63
   372  0639  3402               	retlw	2
   373  063A  3400               	retlw	0
   374  063B  3400               	retlw	0
   375  063C  3400               	retlw	0
   376  063D  3400               	retlw	0
   377  063E  3400               	retlw	0
   378  063F  3400               	retlw	0
   379  0640  3400               	retlw	0
   380  0641  3400               	retlw	0
   381  0642  34DE               	retlw	222
   382  0643  34FF               	retlw	255
   383  0644  3400               	retlw	0
   384  0645  3400               	retlw	0
   385  0646  3400               	retlw	0
   386  0647  3400               	retlw	0
   387  0648  343F               	retlw	63
   388  0649  340C               	retlw	12
   389  064A  34AD               	retlw	173
   390  064B  3403               	retlw	3
   391  064C  34FF               	retlw	255
   392  064D  3430               	retlw	48
   393  064E  34ED               	retlw	237
   394  064F  3403               	retlw	3
   395  0650  347F               	retlw	127
   396  0651  3430               	retlw	48
   397  0652  347F               	retlw	127
   398  0653  343C               	retlw	60
   399  0654  34BF               	retlw	191
   400  0655  3420               	retlw	32
   401  0656  343F               	retlw	63
   402  0657  34CC               	retlw	204
   403  0658  34ED               	retlw	237
   404  0659  3433               	retlw	51
   405  065A  34FF               	retlw	255
   406  065B  34C1               	retlw	193
   407  065C  3473               	retlw	115
   408  065D  34FC               	retlw	252
   409  065E  34FF               	retlw	255
   410  065F  34F0               	retlw	240
   411  0660  34D7               	retlw	215
   412  0661  34CC               	retlw	204
   413  0662  34DB               	retlw	219
   414  0663  34CC               	retlw	204
   415  0664  34FF               	retlw	255
   416  0665  3400               	retlw	0
   417  0666  343F               	retlw	63
   418  0667  341C               	retlw	28
   419  0668  34FB               	retlw	251
   420  0669  3400               	retlw	0
   421  066A  343B               	retlw	59
   422  066B  341C               	retlw	28
   423  066C  343F               	retlw	63
   424  066D  3422               	retlw	34
   425  066E  34ED               	retlw	237
   426  066F  343F               	retlw	63
   427  0670  34FF               	retlw	255
   428  0671  34C0               	retlw	192
   429  0672  34F6               	retlw	246
   430  0673  34FC               	retlw	252
   431  0674  34FA               	retlw	250
   432  0675  34CC               	retlw	204
   433  0676  34D2               	retlw	210
   434  0677  34FF               	retlw	255
   435  0678  34D5               	retlw	213
   436  0679  34FF               	retlw	255
   437  067A  34F6               	retlw	246
   438  067B  3433               	retlw	51
   439  067C  3400               	retlw	0
   440  067D  3400               	retlw	0
   441  067E  3400               	retlw	0
   442  067F  3400               	retlw	0
   443  0680  3400               	retlw	0
   444  0681  3400               	retlw	0
   445  0682  3400               	retlw	0
   446  0683  3400               	retlw	0
   447  0684  34FF               	retlw	255
   448  0685  34F3               	retlw	243
   449  0686                     __end_of_CHAR_DATA:	
   450  0006                     _PORTBbits	set	6
   451  0012                     _T2CONbits	set	18
   452  0007                     _PORTCbits	set	7
   453  000B                     _INTCONbits	set	11
   454  0006                     _PORTB	set	6
   455  0001                     _TMR0	set	1
   456  000C                     _PIR1bits	set	12
   457  0011                     _TMR2	set	17
   458  0012                     _T2CON	set	18
   459  0005                     _PORTAbits	set	5
   460  0005                     _PORTA	set	5
   461  005F                     _GIE	set	95
   462  0018                     _CARRY	set	24
   463  0061                     _TMR2IF	set	97
   464  0095                     _WPUB	set	149
   465  0096                     _IOCB	set	150
   466  0081                     _OPTION_REG	set	129
   467  0092                     _PR2	set	146
   468  0086                     _TRISB	set	134
   469  0087                     _TRISC	set	135
   470  0085                     _TRISA	set	133
   471  010C                     _EEDATA	set	268
   472  010D                     _EEADR	set	269
   473  018D                     _EECON2	set	397
   474  018C                     _EECON1	set	396
   475  0189                     _ANSELH	set	393
   476  0188                     _ANSEL	set	392
   477  0C62                     _WREN	set	3170
   478  0C60                     _RD	set	3168
   479  0C61                     _WR	set	3169
   480                           
   481                           ; #config settings
   482  0000                     
   483                           	psect	cinit
   484  0015                     start_initialization:	
   485  0015                     __initialization:	
   486                           
   487                           ; Initialize objects allocated to BANK3
   488  0015  1783               	bsf	3,7	;select IRP bank2
   489  0016  30B3               	movlw	low (__pdataBANK3+35)
   490  0017  00FD               	movwf	btemp+-1
   491  0018  300D               	movlw	high __pidataBANK3
   492  0019  00FE               	movwf	btemp
   493  001A  30FC               	movlw	low __pidataBANK3
   494  001B  00FF               	movwf	btemp+1
   495  001C  3090               	movlw	low __pdataBANK3
   496  001D  0084               	movwf	4
   497  001E  120A  158A  25AC  120A  118A  	fcall	init_ram0
   498                           
   499                           ; Initialize objects allocated to BANK1
   500  0023  1383               	bcf	3,7	;select IRP bank0
   501  0024  30F0               	movlw	low (__pdataBANK1+80)
   502  0025  00FD               	movwf	btemp+-1
   503  0026  3007               	movlw	high __pidataBANK1
   504  0027  00FE               	movwf	btemp
   505  0028  305A               	movlw	low __pidataBANK1
   506  0029  00FF               	movwf	btemp+1
   507  002A  30A0               	movlw	low __pdataBANK1
   508  002B  0084               	movwf	4
   509  002C  120A  158A  25AC  120A  118A  	fcall	init_ram0
   510                           
   511                           ; Initialize objects allocated to BANK0
   512  0031  305E               	movlw	low (__pdataBANK0+16)
   513  0032  00FD               	movwf	btemp+-1
   514  0033  300D               	movlw	high __pidataBANK0
   515  0034  00FE               	movwf	btemp
   516  0035  3098               	movlw	low __pidataBANK0
   517  0036  00FF               	movwf	btemp+1
   518  0037  304E               	movlw	low __pdataBANK0
   519  0038  0084               	movwf	4
   520  0039  120A  158A  25AC   	fcall	init_ram0
   521                           
   522                           ; Clear objects allocated to BANK0
   523  003C  01DE               	clrf	__pbssBANK0& (0+127)
   524  003D  01DF               	clrf	(__pbssBANK0+1)& (0+127)
   525  003E  01E0               	clrf	(__pbssBANK0+2)& (0+127)
   526                           
   527                           ; Clear objects allocated to COMMON
   528  003F  01FB               	clrf	__pbssCOMMON& (0+127)
   529  0040  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   530  0041  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
   531  0042                     end_of_initialization:	
   532                           ;End of C runtime variable initialization code
   533                           
   534  0042                     __end_of__initialization:	
   535  0042  0183               	clrf	3
   536  0043  120A  118A  2846   	ljmp	_main	;jump to C main() function
   537                           
   538                           	psect	bssCOMMON
   539  007B                     __pbssCOMMON:	
   540  007B                     _pressed_time:	
   541  007B                     	ds	2
   542  007D                     _cursor:	
   543  007D                     	ds	1
   544                           
   545                           	psect	bssBANK0
   546  005E                     __pbssBANK0:	
   547  005E                     _index:	
   548  005E                     	ds	2
   549  0060                     _display_flag:	
   550  0060                     	ds	1
   551                           
   552                           	psect	dataBANK0
   553  004E                     __pdataBANK0:	
   554  004E                     main@F1918:	
   555  004E                     	ds	5
   556  0053                     _speed:	
   557  0053                     	ds	2
   558  0055                     _button_pressed:	
   559  0055                     	ds	1
   560  0056                     _character:	
   561  0056                     	ds	1
   562  0057                     _buffer:	
   563  0057                     	ds	7
   564                           
   565                           	psect	dataBANK1
   566  00A0                     __pdataBANK1:	
   567  00A0                     _message:	
   568  00A0                     	ds	80
   569                           
   570                           	psect	dataBANK3
   571  0190                     __pdataBANK3:	
   572  0190                     _greeting_message:	
   573  0190                     	ds	35
   574                           
   575                           	psect	inittext
   576  0DA8                     init_fetch0:	
   577                           ;	Called with low address in FSR and high address in W
   578                           
   579  0DA8  087E               	movf	126,w
   580  0DA9  008A               	movwf	10
   581  0DAA  087F               	movf	127,w
   582  0DAB  0082               	movwf	2
   583  0DAC                     init_ram0:	
   584                           ;Called with:
   585                           ;	high address of idata address in btemp 
   586                           ;	low address of idata address in btemp+1 
   587                           ;	low address of data in FSR
   588                           ;	high address + 1 of data in btemp-1
   589                           
   590  0DAC  25A8  120A  158A   	fcall	init_fetch0
   591  0DAF  0080               	movwf	0
   592  0DB0  0A84               	incf	4,f
   593  0DB1  0804               	movf	4,w
   594  0DB2  067D               	xorwf	125,w
   595  0DB3  1903               	btfsc	3,2
   596  0DB4  3400               	retlw	0
   597  0DB5  0AFF               	incf	127,f
   598  0DB6  1903               	btfsc	3,2
   599  0DB7  0AFE               	incf	126,f
   600  0DB8  2DAC               	goto	init_ram0
   601                           
   602                           	psect	cstackCOMMON
   603  0070                     __pcstackCOMMON:	
   604  0070                     ?_eeprom_read:	
   605  0070                     ?_rTrim:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0070                     ?_clear:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0070                     ?_init:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0070                     ?_delay:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0070                     ?_save_in_eeprom:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0070                     ?_read_eeprom:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0070                     ?_send_data:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0070                     ??_send_data:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0070                     ?_display:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0070                     ?_control_speed:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0070                     ?_choose_digit_display:	
   636                           ; 1 bytes @ 0x0
   637                           
   638  0070                     ?_isr:	
   639                           ; 1 bytes @ 0x0
   640                           
   641  0070                     ?_main:	
   642                           ; 1 bytes @ 0x0
   643                           
   644                           
   645                           ; 1 bytes @ 0x0
   646  0070                     	ds	3
   647  0073                     send_data@flag:	
   648                           
   649                           ; 2 bytes @ 0x3
   650  0073                     	ds	2
   651  0075                     send_data@rw:	
   652                           
   653                           ; 1 bytes @ 0x5
   654  0075                     	ds	1
   655  0076                     send_data@mask:	
   656                           
   657                           ; 2 bytes @ 0x6
   658  0076                     	ds	2
   659  0078                     send_data@t:	
   660                           
   661                           ; 2 bytes @ 0x8
   662  0078                     	ds	2
   663  007A                     ??_display:	
   664  007A                     display@ch:	
   665                           ; 1 bytes @ 0xA
   666                           
   667                           
   668                           ; 1 bytes @ 0xA
   669  007A                     	ds	1
   670                           
   671                           	psect	cstackBANK0
   672  0020                     __pcstackBANK0:	
   673  0020                     ??_isr:	
   674                           
   675                           ; 1 bytes @ 0x0
   676  0020                     	ds	5
   677  0025                     ?_eeprom_write:	
   678  0025                     ??_eeprom_read:	
   679                           ; 1 bytes @ 0x5
   680                           
   681  0025                     ?_strncpy:	
   682                           ; 1 bytes @ 0x5
   683                           
   684  0025                     ?_strncat:	
   685                           ; 1 bytes @ 0x5
   686                           
   687  0025                     ??_rTrim:	
   688                           ; 1 bytes @ 0x5
   689                           
   690  0025                     ??_init:	
   691                           ; 1 bytes @ 0x5
   692                           
   693  0025                     ??_delay:	
   694                           ; 1 bytes @ 0x5
   695                           
   696  0025                     ?_left_rotate_by_one:	
   697                           ; 1 bytes @ 0x5
   698                           
   699  0025                     ??_choose_digit_display:	
   700                           ; 1 bytes @ 0x5
   701                           
   702  0025                     ?_strlen:	
   703                           ; 1 bytes @ 0x5
   704                           
   705  0025                     eeprom_write@value:	
   706                           ; 2 bytes @ 0x5
   707                           
   708  0025                     strncat@from:	
   709                           ; 1 bytes @ 0x5
   710                           
   711  0025                     left_rotate_by_one@arr:	
   712                           ; 1 bytes @ 0x5
   713                           
   714  0025                     strlen@s:	
   715                           ; 2 bytes @ 0x5
   716                           
   717  0025                     strncpy@from:	
   718                           ; 2 bytes @ 0x5
   719                           
   720                           
   721                           ; 2 bytes @ 0x5
   722  0025                     	ds	1
   723  0026                     ??_eeprom_write:	
   724  0026                     choose_digit_display@n:	
   725                           ; 1 bytes @ 0x6
   726                           
   727  0026                     eeprom_read@addr:	
   728                           ; 1 bytes @ 0x6
   729                           
   730  0026                     rTrim@index:	
   731                           ; 1 bytes @ 0x6
   732                           
   733  0026                     delay@i:	
   734                           ; 2 bytes @ 0x6
   735                           
   736  0026                     strncat@size:	
   737                           ; 2 bytes @ 0x6
   738                           
   739                           
   740                           ; 2 bytes @ 0x6
   741  0026                     	ds	1
   742  0027                     ??_strlen:	
   743  0027                     ??_read_eeprom:	
   744                           ; 1 bytes @ 0x7
   745                           
   746  0027                     eeprom_write@addr:	
   747                           ; 1 bytes @ 0x7
   748                           
   749  0027                     left_rotate_by_one@n:	
   750                           ; 1 bytes @ 0x7
   751                           
   752  0027                     strncpy@size:	
   753                           ; 2 bytes @ 0x7
   754                           
   755                           
   756                           ; 2 bytes @ 0x7
   757  0027                     	ds	1
   758  0028                     ??_strncat:	
   759  0028                     ??_control_speed:	
   760                           ; 1 bytes @ 0x8
   761                           
   762  0028                     read_eeprom@temp:	
   763                           ; 1 bytes @ 0x8
   764                           
   765  0028                     rTrim@i:	
   766                           ; 1 bytes @ 0x8
   767                           
   768                           
   769                           ; 2 bytes @ 0x8
   770  0028                     	ds	1
   771  0029                     ??_strncpy:	
   772  0029                     ??_left_rotate_by_one:	
   773                           ; 1 bytes @ 0x9
   774                           
   775  0029                     read_eeprom@message_length:	
   776                           ; 1 bytes @ 0x9
   777                           
   778  0029                     strncat@to:	
   779                           ; 1 bytes @ 0x9
   780                           
   781  0029                     strlen@cp:	
   782                           ; 1 bytes @ 0x9
   783                           
   784                           
   785                           ; 2 bytes @ 0x9
   786  0029                     	ds	1
   787  002A                     rTrim@str:	
   788  002A                     strncat@cp:	
   789                           ; 1 bytes @ 0xA
   790                           
   791  002A                     read_eeprom@j:	
   792                           ; 1 bytes @ 0xA
   793                           
   794                           
   795                           ; 2 bytes @ 0xA
   796  002A                     	ds	1
   797  002B                     ??_clear:	
   798                           
   799                           ; 1 bytes @ 0xB
   800  002B                     	ds	1
   801  002C                     strncpy@cp:	
   802  002C                     clear@message_length:	
   803                           ; 1 bytes @ 0xC
   804                           
   805                           
   806                           ; 2 bytes @ 0xC
   807  002C                     	ds	1
   808  002D                     strncpy@to:	
   809                           
   810                           ; 1 bytes @ 0xD
   811  002D                     	ds	1
   812  002E                     clear@n:	
   813                           
   814                           ; 2 bytes @ 0xE
   815  002E                     	ds	2
   816  0030                     clear@m:	
   817                           
   818                           ; 2 bytes @ 0x10
   819  0030                     	ds	1
   820  0031                     left_rotate_by_one@temp:	
   821                           
   822                           ; 2 bytes @ 0x11
   823  0031                     	ds	1
   824  0032                     ??_save_in_eeprom:	
   825                           
   826                           ; 1 bytes @ 0x12
   827  0032                     	ds	1
   828  0033                     left_rotate_by_one@j:	
   829                           
   830                           ; 2 bytes @ 0x13
   831  0033                     	ds	1
   832  0034                     save_in_eeprom@temp:	
   833                           
   834                           ; 1 bytes @ 0x14
   835  0034                     	ds	1
   836  0035                     ?_left_rotate:	
   837  0035                     save_in_eeprom@message_length:	
   838                           ; 1 bytes @ 0x15
   839                           
   840  0035                     left_rotate@arr:	
   841                           ; 1 bytes @ 0x15
   842                           
   843                           
   844                           ; 2 bytes @ 0x15
   845  0035                     	ds	1
   846  0036                     save_in_eeprom@j:	
   847                           
   848                           ; 2 bytes @ 0x16
   849  0036                     	ds	1
   850  0037                     left_rotate@d:	
   851                           
   852                           ; 2 bytes @ 0x17
   853  0037                     	ds	2
   854  0039                     left_rotate@n:	
   855                           
   856                           ; 2 bytes @ 0x19
   857  0039                     	ds	2
   858  003B                     ??_left_rotate:	
   859                           
   860                           ; 1 bytes @ 0x1B
   861  003B                     	ds	1
   862  003C                     left_rotate@k:	
   863                           
   864                           ; 2 bytes @ 0x1C
   865  003C                     	ds	2
   866  003E                     ??_main:	
   867                           
   868                           ; 1 bytes @ 0x1E
   869  003E                     	ds	3
   870  0041                     main@blank:	
   871                           
   872                           ; 5 bytes @ 0x21
   873  0041                     	ds	5
   874  0046                     main@message_length:	
   875                           
   876                           ; 2 bytes @ 0x26
   877  0046                     	ds	2
   878  0048                     main@buffer_length:	
   879                           
   880                           ; 2 bytes @ 0x28
   881  0048                     	ds	2
   882  004A                     main@message_length_339:	
   883                           
   884                           ; 2 bytes @ 0x2A
   885  004A                     	ds	2
   886  004C                     main@message_length_340:	
   887                           
   888                           ; 2 bytes @ 0x2C
   889  004C                     	ds	2
   890                           
   891                           	psect	maintext
   892  0046                     __pmaintext:	
   893 ;;
   894 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   895 ;;
   896 ;; *************** function _main *****************
   897 ;; Defined at:
   898 ;;		line 549 in file "main.c"
   899 ;; Parameters:    Size  Location     Type
   900 ;;		None
   901 ;; Auto vars:     Size  Location     Type
   902 ;;  message_leng    2   44[BANK0 ] short 
   903 ;;  message_leng    2   42[BANK0 ] short 
   904 ;;  buffer_lengt    2   40[BANK0 ] short 
   905 ;;  message_leng    2   38[BANK0 ] short 
   906 ;;  blank           5   33[BANK0 ] unsigned char [5]
   907 ;; Return value:  Size  Location     Type
   908 ;;                  1    wreg      void 
   909 ;; Registers used:
   910 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   911 ;; Tracked objects:
   912 ;;		On entry : B00/0
   913 ;;		On exit  : 0/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   916 ;;      Params:         0       0       0       0       0
   917 ;;      Locals:         0      13       0       0       0
   918 ;;      Temps:          0       3       0       0       0
   919 ;;      Totals:         0      16       0       0       0
   920 ;;Total ram usage:       16 bytes
   921 ;; Hardware stack levels required when called:    7
   922 ;; This function calls:
   923 ;;		_choose_digit_display
   924 ;;		_clear
   925 ;;		_control_speed
   926 ;;		_init
   927 ;;		_left_rotate
   928 ;;		_rTrim
   929 ;;		_read_eeprom
   930 ;;		_save_in_eeprom
   931 ;;		_strlen
   932 ;;		_strncat
   933 ;;		_strncpy
   934 ;; This function is called by:
   935 ;;		Startup code after reset
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939                           
   940                           ;psect for function _main
   941  0046                     _main:	
   942                           
   943                           ;main.c: 551: char blank[] = "    ";
   944                           
   945                           ;incstack = 0
   946                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   947  0046  3041               	movlw	main@blank& (0+255)
   948  0047  0084               	movwf	4
   949  0048  1283               	bcf	3,5	;RP0=0, select bank0
   950  0049  1303               	bcf	3,6	;RP1=0, select bank0
   951  004A  084E               	movf	main@F1918,w
   952  004B  1383               	bcf	3,7	;select IRP bank0
   953  004C  0080               	movwf	0
   954  004D  0A84               	incf	4,f
   955  004E  084F               	movf	main@F1918+1,w
   956  004F  0080               	movwf	0
   957  0050  0A84               	incf	4,f
   958  0051  0850               	movf	main@F1918+2,w
   959  0052  0080               	movwf	0
   960  0053  0A84               	incf	4,f
   961  0054  0851               	movf	main@F1918+3,w
   962  0055  0080               	movwf	0
   963  0056  0A84               	incf	4,f
   964  0057  0852               	movf	main@F1918+4,w
   965  0058  0080               	movwf	0
   966                           
   967                           ;main.c: 552: init();
   968  0059  120A  158A  2707  120A  118A  	fcall	_init
   969  005E                     l1975:	
   970                           ;main.c: 554: for (;;)
   971                           
   972                           
   973                           ;main.c: 555: {
   974                           ;main.c: 557: if (TMR2IF == 1)
   975  005E  1283               	bcf	3,5	;RP0=0, select bank0
   976  005F  1303               	bcf	3,6	;RP1=0, select bank0
   977  0060  1C8C               	btfss	12,1	;volatile
   978  0061  2864               	goto	l1979
   979                           
   980                           ;main.c: 558: {
   981                           ;main.c: 559: pressed_time = 0;
   982  0062  01FB               	clrf	_pressed_time
   983  0063  01FC               	clrf	_pressed_time+1
   984  0064                     l1979:	
   985                           
   986                           ;main.c: 560: }
   987                           ;main.c: 562: if (cursor >= 6)
   988  0064  3006               	movlw	6
   989  0065  027D               	subwf	_cursor,w
   990  0066  1C03               	skipc
   991  0067  2870               	goto	l1983
   992                           
   993                           ;main.c: 563: {
   994                           ;main.c: 564: cursor = 5;
   995  0068  3005               	movlw	5
   996  0069  00BE               	movwf	??_main
   997  006A  083E               	movf	??_main,w
   998  006B  00FD               	movwf	_cursor
   999                           
  1000                           ;main.c: 565: character = '_';
  1001  006C  305F               	movlw	95
  1002  006D  00BE               	movwf	??_main
  1003  006E  083E               	movf	??_main,w
  1004  006F  00D6               	movwf	_character
  1005  0070                     l1983:	
  1006                           
  1007                           ;main.c: 566: }
  1008                           ;main.c: 568: if (button_pressed == NO_PRESS)
  1009  0070  0355               	decf	_button_pressed,w
  1010  0071  1D03               	btfss	3,2
  1011  0072  28C8               	goto	l2011
  1012                           
  1013                           ;main.c: 569: {
  1014                           ;main.c: 570: short message_length;
  1015                           ;main.c: 571: message_length = strlen(greeting_message);
  1016  0073  3090               	movlw	(low (_greeting_message| (0+256)))& (0+255)
  1017  0074  00A5               	movwf	strlen@s
  1018  0075  3001               	movlw	1
  1019  0076  00A6               	movwf	strlen@s+1
  1020  0077  120A  158A  25D9  120A  118A  	fcall	_strlen
  1021  007C  1283               	bcf	3,5	;RP0=0, select bank0
  1022  007D  1303               	bcf	3,6	;RP1=0, select bank0
  1023  007E  0826               	movf	?_strlen+1,w
  1024  007F  00C7               	movwf	main@message_length+1
  1025  0080  0825               	movf	?_strlen,w
  1026  0081  00C6               	movwf	main@message_length
  1027                           
  1028                           ;main.c: 572: button_pressed = DEFAULT;
  1029  0082  01D5               	clrf	_button_pressed
  1030                           
  1031                           ;main.c: 573: cursor = 6;
  1032  0083  3006               	movlw	6
  1033  0084  00BE               	movwf	??_main
  1034  0085  083E               	movf	??_main,w
  1035  0086  00FD               	movwf	_cursor
  1036                           
  1037                           ;main.c: 574: index = 0;
  1038  0087  01DE               	clrf	_index
  1039  0088  01DF               	clrf	_index+1
  1040                           
  1041                           ;main.c: 584: break;
  1042  0089  2890               	goto	l1993
  1043  008A                     l2005:	
  1044                           
  1045                           ;main.c: 585: }
  1046                           ;main.c: 586: if (button_pressed == B) break;
  1047  008A  3004               	movlw	4
  1048  008B  1283               	bcf	3,5	;RP0=0, select bank0
  1049  008C  1303               	bcf	3,6	;RP1=0, select bank0
  1050  008D  0655               	xorwf	_button_pressed,w
  1051  008E  1903               	btfsc	3,2
  1052  008F  28C4               	goto	l2009
  1053  0090                     l1993:	
  1054                           ;main.c: 575: while (1)
  1055                           
  1056                           
  1057                           ;main.c: 576: {
  1058                           ;main.c: 577: control_speed();
  1059  0090  120A  158A  27BE  120A  118A  	fcall	_control_speed
  1060                           
  1061                           ;main.c: 578: strncpy(buffer, greeting_message, 6);
  1062  0095  3090               	movlw	(low (_greeting_message| (0+256)))& (0+255)
  1063  0096  1283               	bcf	3,5	;RP0=0, select bank0
  1064  0097  1303               	bcf	3,6	;RP1=0, select bank0
  1065  0098  00A5               	movwf	strncpy@from
  1066  0099  3001               	movlw	1
  1067  009A  00A6               	movwf	strncpy@from+1
  1068  009B  3006               	movlw	6
  1069  009C  00A7               	movwf	strncpy@size
  1070  009D  3000               	movlw	0
  1071  009E  00A8               	movwf	strncpy@size+1
  1072  009F  3057               	movlw	(low (_buffer| 0))& (0+255)
  1073  00A0  120A  158A  277F  120A  118A  	fcall	_strncpy
  1074                           
  1075                           ;main.c: 579: left_rotate(greeting_message, 1, message_length);
  1076  00A5  3090               	movlw	(low (_greeting_message| (0+256)))& (0+255)
  1077  00A6  1283               	bcf	3,5	;RP0=0, select bank0
  1078  00A7  1303               	bcf	3,6	;RP1=0, select bank0
  1079  00A8  00B5               	movwf	left_rotate@arr
  1080  00A9  3001               	movlw	1
  1081  00AA  00B6               	movwf	left_rotate@arr+1
  1082  00AB  3001               	movlw	1
  1083  00AC  00B7               	movwf	left_rotate@d
  1084  00AD  3000               	movlw	0
  1085  00AE  00B8               	movwf	left_rotate@d+1
  1086  00AF  0847               	movf	main@message_length+1,w
  1087  00B0  00BA               	movwf	left_rotate@n+1
  1088  00B1  0846               	movf	main@message_length,w
  1089  00B2  00B9               	movwf	left_rotate@n
  1090  00B3  120A  158A  2643  120A  118A  	fcall	_left_rotate
  1091                           
  1092                           ;main.c: 580: if (button_pressed == A)
  1093  00B8  3002               	movlw	2
  1094  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  1095  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  1096  00BB  0655               	xorwf	_button_pressed,w
  1097  00BC  1D03               	btfss	3,2
  1098  00BD  288A               	goto	l2005
  1099                           
  1100                           ;main.c: 581: {
  1101                           ;main.c: 582: button_pressed = DEFAULT;
  1102  00BE  01D5               	clrf	_button_pressed
  1103                           
  1104                           ;main.c: 583: clear();
  1105  00BF  120A  118A  26F7  120A  118A  	fcall	_clear
  1106  00C4                     l2009:	
  1107                           
  1108                           ;main.c: 587: }
  1109                           ;main.c: 588: index = 0;
  1110  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  1111  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  1112  00C6  01DE               	clrf	_index
  1113  00C7  01DF               	clrf	_index+1
  1114  00C8                     l2011:	
  1115                           
  1116                           ;main.c: 589: }
  1117                           ;main.c: 591: if (button_pressed == D)
  1118  00C8  3006               	movlw	6
  1119  00C9  0655               	xorwf	_button_pressed,w
  1120  00CA  1D03               	btfss	3,2
  1121  00CB  28DB               	goto	l2021
  1122                           
  1123                           ;main.c: 592: {
  1124                           ;main.c: 593: clear();
  1125  00CC  120A  118A  26F7  120A  118A  	fcall	_clear
  1126                           
  1127                           ;main.c: 594: button_pressed = NO_PRESS;
  1128  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  1129  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  1130  00D3  01D5               	clrf	_button_pressed
  1131  00D4  0AD5               	incf	_button_pressed,f
  1132                           
  1133                           ;main.c: 595: cursor = 6;
  1134  00D5  3006               	movlw	6
  1135  00D6  00BE               	movwf	??_main
  1136  00D7  083E               	movf	??_main,w
  1137  00D8  00FD               	movwf	_cursor
  1138                           
  1139                           ;main.c: 596: index = 0;
  1140  00D9  01DE               	clrf	_index
  1141  00DA  01DF               	clrf	_index+1
  1142  00DB                     l2021:	
  1143                           
  1144                           ;main.c: 597: }
  1145                           ;main.c: 600: if ((button_pressed == A) && (display_flag == 0) && (cursor == 0))
  1146  00DB  3002               	movlw	2
  1147  00DC  0655               	xorwf	_button_pressed,w
  1148  00DD  1D03               	btfss	3,2
  1149  00DE  28EB               	goto	l2029
  1150  00DF  0860               	movf	_display_flag,w
  1151  00E0  1D03               	btfss	3,2
  1152  00E1  28EB               	goto	l2029
  1153  00E2  087D               	movf	_cursor,w
  1154  00E3  1D03               	btfss	3,2
  1155  00E4  28EB               	goto	l2029
  1156                           
  1157                           ;main.c: 601: {
  1158                           ;main.c: 602: choose_digit_display(0);
  1159  00E5  3000               	movlw	0
  1160  00E6  120A  158A  266B  120A  118A  	fcall	_choose_digit_display
  1161  00EB                     l2029:	
  1162                           
  1163                           ;main.c: 603: }
  1164                           ;main.c: 605: if ((button_pressed == A) && (display_flag == 1) && (cursor == 1))
  1165  00EB  3002               	movlw	2
  1166  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  1167  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  1168  00EE  0655               	xorwf	_button_pressed,w
  1169  00EF  1D03               	btfss	3,2
  1170  00F0  28FD               	goto	l2037
  1171  00F1  0360               	decf	_display_flag,w
  1172  00F2  1D03               	btfss	3,2
  1173  00F3  28FD               	goto	l2037
  1174  00F4  037D               	decf	_cursor,w
  1175  00F5  1D03               	btfss	3,2
  1176  00F6  28FD               	goto	l2037
  1177                           
  1178                           ;main.c: 606: {
  1179                           ;main.c: 607: choose_digit_display(1);
  1180  00F7  3001               	movlw	1
  1181  00F8  120A  158A  266B  120A  118A  	fcall	_choose_digit_display
  1182  00FD                     l2037:	
  1183                           
  1184                           ;main.c: 608: }
  1185                           ;main.c: 610: if ((button_pressed == A) && (display_flag == 2) && (cursor == 2))
  1186  00FD  3002               	movlw	2
  1187  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  1188  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  1189  0100  0655               	xorwf	_button_pressed,w
  1190  0101  1D03               	btfss	3,2
  1191  0102  2911               	goto	l2045
  1192  0103  3002               	movlw	2
  1193  0104  0660               	xorwf	_display_flag,w
  1194  0105  1D03               	btfss	3,2
  1195  0106  2911               	goto	l2045
  1196  0107  3002               	movlw	2
  1197  0108  067D               	xorwf	_cursor,w
  1198  0109  1D03               	btfss	3,2
  1199  010A  2911               	goto	l2045
  1200                           
  1201                           ;main.c: 611: {
  1202                           ;main.c: 612: choose_digit_display(2);
  1203  010B  3002               	movlw	2
  1204  010C  120A  158A  266B  120A  118A  	fcall	_choose_digit_display
  1205  0111                     l2045:	
  1206                           
  1207                           ;main.c: 613: }
  1208                           ;main.c: 615: if ((button_pressed == A) && (display_flag == 3) && (cursor == 3))
  1209  0111  3002               	movlw	2
  1210  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1211  0113  1303               	bcf	3,6	;RP1=0, select bank0
  1212  0114  0655               	xorwf	_button_pressed,w
  1213  0115  1D03               	btfss	3,2
  1214  0116  2925               	goto	l2053
  1215  0117  3003               	movlw	3
  1216  0118  0660               	xorwf	_display_flag,w
  1217  0119  1D03               	btfss	3,2
  1218  011A  2925               	goto	l2053
  1219  011B  3003               	movlw	3
  1220  011C  067D               	xorwf	_cursor,w
  1221  011D  1D03               	btfss	3,2
  1222  011E  2925               	goto	l2053
  1223                           
  1224                           ;main.c: 616: {
  1225                           ;main.c: 617: choose_digit_display(3);
  1226  011F  3003               	movlw	3
  1227  0120  120A  158A  266B  120A  118A  	fcall	_choose_digit_display
  1228  0125                     l2053:	
  1229                           
  1230                           ;main.c: 618: }
  1231                           ;main.c: 620: if ((button_pressed == A) && (display_flag == 4) && (cursor == 4))
  1232  0125  3002               	movlw	2
  1233  0126  1283               	bcf	3,5	;RP0=0, select bank0
  1234  0127  1303               	bcf	3,6	;RP1=0, select bank0
  1235  0128  0655               	xorwf	_button_pressed,w
  1236  0129  1D03               	btfss	3,2
  1237  012A  2939               	goto	l2061
  1238  012B  3004               	movlw	4
  1239  012C  0660               	xorwf	_display_flag,w
  1240  012D  1D03               	btfss	3,2
  1241  012E  2939               	goto	l2061
  1242  012F  3004               	movlw	4
  1243  0130  067D               	xorwf	_cursor,w
  1244  0131  1D03               	btfss	3,2
  1245  0132  2939               	goto	l2061
  1246                           
  1247                           ;main.c: 621: {
  1248                           ;main.c: 622: choose_digit_display(4);
  1249  0133  3004               	movlw	4
  1250  0134  120A  158A  266B  120A  118A  	fcall	_choose_digit_display
  1251  0139                     l2061:	
  1252                           
  1253                           ;main.c: 623: }
  1254                           ;main.c: 625: if ((button_pressed == A) && (display_flag == 5) && (cursor == 5))
  1255  0139  3002               	movlw	2
  1256  013A  1283               	bcf	3,5	;RP0=0, select bank0
  1257  013B  1303               	bcf	3,6	;RP1=0, select bank0
  1258  013C  0655               	xorwf	_button_pressed,w
  1259  013D  1D03               	btfss	3,2
  1260  013E  298A               	goto	l2083
  1261  013F  3005               	movlw	5
  1262  0140  0660               	xorwf	_display_flag,w
  1263  0141  1D03               	btfss	3,2
  1264  0142  298A               	goto	l2083
  1265  0143  3005               	movlw	5
  1266  0144  067D               	xorwf	_cursor,w
  1267  0145  1D03               	btfss	3,2
  1268  0146  298A               	goto	l2083
  1269                           
  1270                           ;main.c: 626: {
  1271                           ;main.c: 627: if ((buffer[0] == ' ')&&(buffer[1] == ' ')&&
  1272                           ;main.c: 628: (buffer[2] == ' ')&&(buffer[3] == ' ')&&
  1273                           ;main.c: 629: (buffer[4] == ' ')&&(character == '_'))
  1274  0147  3020               	movlw	32
  1275  0148  0657               	xorwf	_buffer,w
  1276  0149  1D03               	btfss	3,2
  1277  014A  2962               	goto	l2081
  1278  014B  3020               	movlw	32
  1279  014C  0658               	xorwf	_buffer+1,w
  1280  014D  1D03               	btfss	3,2
  1281  014E  2962               	goto	l2081
  1282  014F  3020               	movlw	32
  1283  0150  0659               	xorwf	_buffer+2,w
  1284  0151  1D03               	btfss	3,2
  1285  0152  2962               	goto	l2081
  1286  0153  3020               	movlw	32
  1287  0154  065A               	xorwf	_buffer+3,w
  1288  0155  1D03               	btfss	3,2
  1289  0156  2962               	goto	l2081
  1290  0157  3020               	movlw	32
  1291  0158  065B               	xorwf	_buffer+4,w
  1292  0159  1D03               	btfss	3,2
  1293  015A  2962               	goto	l2081
  1294  015B  305F               	movlw	95
  1295  015C  0656               	xorwf	_character,w
  1296  015D  1D03               	btfss	3,2
  1297  015E  2962               	goto	l2081
  1298                           
  1299                           ;main.c: 630: {
  1300                           ;main.c: 631: button_pressed = NO_PRESS;
  1301  015F  01D5               	clrf	_button_pressed
  1302  0160  0AD5               	incf	_button_pressed,f
  1303                           
  1304                           ;main.c: 632: }
  1305  0161  2968               	goto	l243
  1306  0162                     l2081:	
  1307                           
  1308                           ;main.c: 633: else choose_digit_display(5);
  1309  0162  3005               	movlw	5
  1310  0163  120A  158A  266B  120A  118A  	fcall	_choose_digit_display
  1311  0168                     l243:	
  1312                           
  1313                           ;main.c: 634: short buffer_length = strlen(buffer);
  1314  0168  3057               	movlw	(low (_buffer| 0))& (0+255)
  1315  0169  1283               	bcf	3,5	;RP0=0, select bank0
  1316  016A  1303               	bcf	3,6	;RP1=0, select bank0
  1317  016B  00A5               	movwf	strlen@s
  1318  016C  3000               	movlw	0
  1319  016D  00A6               	movwf	strlen@s+1
  1320  016E  120A  158A  25D9  120A  118A  	fcall	_strlen
  1321  0173  1283               	bcf	3,5	;RP0=0, select bank0
  1322  0174  1303               	bcf	3,6	;RP1=0, select bank0
  1323  0175  0826               	movf	?_strlen+1,w
  1324  0176  00C9               	movwf	main@buffer_length+1
  1325  0177  0825               	movf	?_strlen,w
  1326  0178  00C8               	movwf	main@buffer_length
  1327                           
  1328                           ;main.c: 635: left_rotate(buffer, 1, buffer_length);
  1329  0179  3057               	movlw	(low (_buffer| 0))& (0+255)
  1330  017A  00B5               	movwf	left_rotate@arr
  1331  017B  3000               	movlw	0
  1332  017C  00B6               	movwf	left_rotate@arr+1
  1333  017D  3001               	movlw	1
  1334  017E  00B7               	movwf	left_rotate@d
  1335  017F  3000               	movlw	0
  1336  0180  00B8               	movwf	left_rotate@d+1
  1337  0181  0849               	movf	main@buffer_length+1,w
  1338  0182  00BA               	movwf	left_rotate@n+1
  1339  0183  0848               	movf	main@buffer_length,w
  1340  0184  00B9               	movwf	left_rotate@n
  1341  0185  120A  158A  2643  120A  118A  	fcall	_left_rotate
  1342  018A                     l2083:	
  1343                           
  1344                           ;main.c: 636: }
  1345                           ;main.c: 640: if ((button_pressed == A_LONG)&&(display_flag > 1)&&(cursor > 1))
  1346  018A  3003               	movlw	3
  1347  018B  1283               	bcf	3,5	;RP0=0, select bank0
  1348  018C  1303               	bcf	3,6	;RP1=0, select bank0
  1349  018D  0655               	xorwf	_button_pressed,w
  1350  018E  1D03               	btfss	3,2
  1351  018F  2A44               	goto	l2119
  1352  0190  3002               	movlw	2
  1353  0191  0260               	subwf	_display_flag,w
  1354  0192  1C03               	skipc
  1355  0193  2A44               	goto	l2119
  1356  0194  3002               	movlw	2
  1357  0195  027D               	subwf	_cursor,w
  1358  0196  1C03               	skipc
  1359  0197  2A44               	goto	l2119
  1360                           
  1361                           ;main.c: 641: {
  1362                           ;main.c: 642: if ((cursor < 6) && (strlen(message) < 6))
  1363  0198  3006               	movlw	6
  1364  0199  027D               	subwf	_cursor,w
  1365  019A  1803               	skipnc
  1366  019B  29C8               	goto	l245
  1367  019C  30A0               	movlw	(low (_message| 0))& (0+255)
  1368  019D  00A5               	movwf	strlen@s
  1369  019E  3000               	movlw	0
  1370  019F  00A6               	movwf	strlen@s+1
  1371  01A0  120A  158A  25D9  120A  118A  	fcall	_strlen
  1372  01A5  3000               	movlw	0
  1373  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  1374  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  1375  01A8  0226               	subwf	?_strlen+1,w
  1376  01A9  3006               	movlw	6
  1377  01AA  1903               	skipnz
  1378  01AB  0225               	subwf	?_strlen,w
  1379  01AC  1803               	skipnc
  1380  01AD  29C8               	goto	l245
  1381                           
  1382                           ;main.c: 643: {
  1383                           ;main.c: 645: strncat(message, blank, 6 - cursor);
  1384  01AE  3041               	movlw	(low (main@blank| 0))& (0+255)
  1385  01AF  00BE               	movwf	??_main
  1386  01B0  083E               	movf	??_main,w
  1387  01B1  00A5               	movwf	strncat@from
  1388  01B2  087D               	movf	_cursor,w
  1389  01B3  00BF               	movwf	??_main+1
  1390  01B4  01C0               	clrf	??_main+2
  1391  01B5  09BF               	comf	??_main+1,f
  1392  01B6  09C0               	comf	??_main+2,f
  1393  01B7  0ABF               	incf	??_main+1,f
  1394  01B8  1903               	skipnz
  1395  01B9  0AC0               	incf	??_main+2,f
  1396  01BA  083F               	movf	??_main+1,w
  1397  01BB  3E06               	addlw	6
  1398  01BC  00A6               	movwf	strncat@size
  1399  01BD  0840               	movf	??_main+2,w
  1400  01BE  1803               	skipnc
  1401  01BF  3E01               	addlw	1
  1402  01C0  3E00               	addlw	0
  1403  01C1  00A7               	movwf	strncat@size+1
  1404  01C2  30A0               	movlw	(low (_message| 0))& (0+255)
  1405  01C3  120A  158A  26D0  120A  118A  	fcall	_strncat
  1406  01C8                     l245:	
  1407                           
  1408                           ;main.c: 647: }
  1409                           ;main.c: 648: if (strlen(message) > 6) rTrim(message);
  1410  01C8  30A0               	movlw	(low (_message| 0))& (0+255)
  1411  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  1412  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  1413  01CB  00A5               	movwf	strlen@s
  1414  01CC  3000               	movlw	0
  1415  01CD  00A6               	movwf	strlen@s+1
  1416  01CE  120A  158A  25D9  120A  118A  	fcall	_strlen
  1417  01D3  3000               	movlw	0
  1418  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  1419  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  1420  01D6  0226               	subwf	?_strlen+1,w
  1421  01D7  3007               	movlw	7
  1422  01D8  1903               	skipnz
  1423  01D9  0225               	subwf	?_strlen,w
  1424  01DA  1C03               	skipc
  1425  01DB  29E2               	goto	l246
  1426  01DC  30A0               	movlw	(low (_message| 0))& (0+255)
  1427  01DD  120A  158A  2742  120A  118A  	fcall	_rTrim
  1428  01E2                     l246:	
  1429                           
  1430                           ;main.c: 649: strncat(message, blank, 4);
  1431  01E2  3041               	movlw	(low (main@blank| 0))& (0+255)
  1432  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  1433  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  1434  01E5  00BE               	movwf	??_main
  1435  01E6  083E               	movf	??_main,w
  1436  01E7  00A5               	movwf	strncat@from
  1437  01E8  3004               	movlw	4
  1438  01E9  00A6               	movwf	strncat@size
  1439  01EA  3000               	movlw	0
  1440  01EB  00A7               	movwf	strncat@size+1
  1441  01EC  30A0               	movlw	(low (_message| 0))& (0+255)
  1442  01ED  120A  158A  26D0  120A  118A  	fcall	_strncat
  1443                           
  1444                           ;main.c: 650: short message_length;
  1445                           ;main.c: 651: button_pressed = DEFAULT;
  1446  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1447  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  1448  01F4  01D5               	clrf	_button_pressed
  1449                           
  1450                           ;main.c: 652: cursor = 6;
  1451  01F5  3006               	movlw	6
  1452  01F6  00BE               	movwf	??_main
  1453  01F7  083E               	movf	??_main,w
  1454  01F8  00FD               	movwf	_cursor
  1455                           
  1456                           ;main.c: 653: index = 0;
  1457  01F9  01DE               	clrf	_index
  1458  01FA  01DF               	clrf	_index+1
  1459                           
  1460                           ;main.c: 655: message_length = strlen(message);
  1461  01FB  30A0               	movlw	(low (_message| 0))& (0+255)
  1462  01FC  00A5               	movwf	strlen@s
  1463  01FD  3000               	movlw	0
  1464  01FE  00A6               	movwf	strlen@s+1
  1465  01FF  120A  158A  25D9  120A  118A  	fcall	_strlen
  1466  0204  1283               	bcf	3,5	;RP0=0, select bank0
  1467  0205  1303               	bcf	3,6	;RP1=0, select bank0
  1468  0206  0826               	movf	?_strlen+1,w
  1469  0207  00CB               	movwf	main@message_length_339+1
  1470  0208  0825               	movf	?_strlen,w
  1471  0209  00CA               	movwf	main@message_length_339
  1472  020A                     l2111:	
  1473                           ;main.c: 657: while (button_pressed != D)
  1474                           
  1475  020A  3006               	movlw	6
  1476  020B  1283               	bcf	3,5	;RP0=0, select bank0
  1477  020C  1303               	bcf	3,6	;RP1=0, select bank0
  1478  020D  0655               	xorwf	_button_pressed,w
  1479  020E  1903               	btfsc	3,2
  1480  020F  2A39               	goto	l2113
  1481                           
  1482                           ;main.c: 658: {
  1483                           ;main.c: 659: control_speed();
  1484  0210  120A  158A  27BE  120A  118A  	fcall	_control_speed
  1485                           
  1486                           ;main.c: 660: strncpy(buffer, message, 6);
  1487  0215  30A0               	movlw	(low (_message| 0))& (0+255)
  1488  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1489  0217  1303               	bcf	3,6	;RP1=0, select bank0
  1490  0218  00A5               	movwf	strncpy@from
  1491  0219  3000               	movlw	0
  1492  021A  00A6               	movwf	strncpy@from+1
  1493  021B  3006               	movlw	6
  1494  021C  00A7               	movwf	strncpy@size
  1495  021D  3000               	movlw	0
  1496  021E  00A8               	movwf	strncpy@size+1
  1497  021F  3057               	movlw	(low (_buffer| 0))& (0+255)
  1498  0220  120A  158A  277F  120A  118A  	fcall	_strncpy
  1499                           
  1500                           ;main.c: 661: left_rotate(message, 1, message_length);
  1501  0225  30A0               	movlw	(low (_message| 0))& (0+255)
  1502  0226  1283               	bcf	3,5	;RP0=0, select bank0
  1503  0227  1303               	bcf	3,6	;RP1=0, select bank0
  1504  0228  00B5               	movwf	left_rotate@arr
  1505  0229  3000               	movlw	0
  1506  022A  00B6               	movwf	left_rotate@arr+1
  1507  022B  3001               	movlw	1
  1508  022C  00B7               	movwf	left_rotate@d
  1509  022D  3000               	movlw	0
  1510  022E  00B8               	movwf	left_rotate@d+1
  1511  022F  084B               	movf	main@message_length_339+1,w
  1512  0230  00BA               	movwf	left_rotate@n+1
  1513  0231  084A               	movf	main@message_length_339,w
  1514  0232  00B9               	movwf	left_rotate@n
  1515  0233  120A  158A  2643  120A  118A  	fcall	_left_rotate
  1516  0238  2A0A               	goto	l2111
  1517  0239                     l2113:	
  1518                           
  1519                           ;main.c: 662: }
  1520                           ;main.c: 663: clear();
  1521  0239  120A  118A  26F7  120A  118A  	fcall	_clear
  1522                           
  1523                           ;main.c: 664: button_pressed = NO_PRESS;
  1524  023E  1283               	bcf	3,5	;RP0=0, select bank0
  1525  023F  1303               	bcf	3,6	;RP1=0, select bank0
  1526  0240  01D5               	clrf	_button_pressed
  1527  0241  0AD5               	incf	_button_pressed,f
  1528                           
  1529                           ;main.c: 665: index = 0;
  1530  0242  01DE               	clrf	_index
  1531  0243  01DF               	clrf	_index+1
  1532  0244                     l2119:	
  1533                           
  1534                           ;main.c: 666: }
  1535                           ;main.c: 668: if (button_pressed == B)
  1536  0244  3004               	movlw	4
  1537  0245  0655               	xorwf	_button_pressed,w
  1538  0246  1D03               	btfss	3,2
  1539  0247  2A9F               	goto	l2145
  1540                           
  1541                           ;main.c: 669: {
  1542                           ;main.c: 670: short message_length;
  1543                           ;main.c: 671: button_pressed = DEFAULT;
  1544  0248  01D5               	clrf	_button_pressed
  1545                           
  1546                           ;main.c: 672: cursor = 6;
  1547  0249  3006               	movlw	6
  1548  024A  00BE               	movwf	??_main
  1549  024B  083E               	movf	??_main,w
  1550  024C  00FD               	movwf	_cursor
  1551                           
  1552                           ;main.c: 673: index = 0;
  1553  024D  01DE               	clrf	_index
  1554  024E  01DF               	clrf	_index+1
  1555                           
  1556                           ;main.c: 674: read_eeprom();
  1557  024F  120A  158A  269B  120A  118A  	fcall	_read_eeprom
  1558                           
  1559                           ;main.c: 677: message_length = strlen(message);
  1560  0254  30A0               	movlw	(low (_message| 0))& (0+255)
  1561  0255  1283               	bcf	3,5	;RP0=0, select bank0
  1562  0256  1303               	bcf	3,6	;RP1=0, select bank0
  1563  0257  00A5               	movwf	strlen@s
  1564  0258  3000               	movlw	0
  1565  0259  00A6               	movwf	strlen@s+1
  1566  025A  120A  158A  25D9  120A  118A  	fcall	_strlen
  1567  025F  1283               	bcf	3,5	;RP0=0, select bank0
  1568  0260  1303               	bcf	3,6	;RP1=0, select bank0
  1569  0261  0826               	movf	?_strlen+1,w
  1570  0262  00CD               	movwf	main@message_length_340+1
  1571  0263  0825               	movf	?_strlen,w
  1572  0264  00CC               	movwf	main@message_length_340
  1573  0265                     l2137:	
  1574                           ;main.c: 679: while (button_pressed != D)
  1575                           
  1576  0265  3006               	movlw	6
  1577  0266  1283               	bcf	3,5	;RP0=0, select bank0
  1578  0267  1303               	bcf	3,6	;RP1=0, select bank0
  1579  0268  0655               	xorwf	_button_pressed,w
  1580  0269  1903               	btfsc	3,2
  1581  026A  2A94               	goto	l2139
  1582                           
  1583                           ;main.c: 680: {
  1584                           ;main.c: 681: control_speed();
  1585  026B  120A  158A  27BE  120A  118A  	fcall	_control_speed
  1586                           
  1587                           ;main.c: 682: strncpy(buffer, message, 6);
  1588  0270  30A0               	movlw	(low (_message| 0))& (0+255)
  1589  0271  1283               	bcf	3,5	;RP0=0, select bank0
  1590  0272  1303               	bcf	3,6	;RP1=0, select bank0
  1591  0273  00A5               	movwf	strncpy@from
  1592  0274  3000               	movlw	0
  1593  0275  00A6               	movwf	strncpy@from+1
  1594  0276  3006               	movlw	6
  1595  0277  00A7               	movwf	strncpy@size
  1596  0278  3000               	movlw	0
  1597  0279  00A8               	movwf	strncpy@size+1
  1598  027A  3057               	movlw	(low (_buffer| 0))& (0+255)
  1599  027B  120A  158A  277F  120A  118A  	fcall	_strncpy
  1600                           
  1601                           ;main.c: 683: left_rotate(message, 1, message_length);
  1602  0280  30A0               	movlw	(low (_message| 0))& (0+255)
  1603  0281  1283               	bcf	3,5	;RP0=0, select bank0
  1604  0282  1303               	bcf	3,6	;RP1=0, select bank0
  1605  0283  00B5               	movwf	left_rotate@arr
  1606  0284  3000               	movlw	0
  1607  0285  00B6               	movwf	left_rotate@arr+1
  1608  0286  3001               	movlw	1
  1609  0287  00B7               	movwf	left_rotate@d
  1610  0288  3000               	movlw	0
  1611  0289  00B8               	movwf	left_rotate@d+1
  1612  028A  084D               	movf	main@message_length_340+1,w
  1613  028B  00BA               	movwf	left_rotate@n+1
  1614  028C  084C               	movf	main@message_length_340,w
  1615  028D  00B9               	movwf	left_rotate@n
  1616  028E  120A  158A  2643  120A  118A  	fcall	_left_rotate
  1617  0293  2A65               	goto	l2137
  1618  0294                     l2139:	
  1619                           
  1620                           ;main.c: 684: }
  1621                           ;main.c: 685: clear();
  1622  0294  120A  118A  26F7  120A  118A  	fcall	_clear
  1623                           
  1624                           ;main.c: 686: button_pressed = NO_PRESS;
  1625  0299  1283               	bcf	3,5	;RP0=0, select bank0
  1626  029A  1303               	bcf	3,6	;RP1=0, select bank0
  1627  029B  01D5               	clrf	_button_pressed
  1628  029C  0AD5               	incf	_button_pressed,f
  1629                           
  1630                           ;main.c: 687: index = 0;
  1631  029D  01DE               	clrf	_index
  1632  029E  01DF               	clrf	_index+1
  1633  029F                     l2145:	
  1634                           
  1635                           ;main.c: 688: }
  1636                           ;main.c: 690: if ((button_pressed == C)&&(display_flag > 1)&&(cursor > 1))
  1637  029F  3005               	movlw	5
  1638  02A0  0655               	xorwf	_button_pressed,w
  1639  02A1  1D03               	btfss	3,2
  1640  02A2  285E               	goto	l1975
  1641  02A3  3002               	movlw	2
  1642  02A4  0260               	subwf	_display_flag,w
  1643  02A5  1C03               	skipc
  1644  02A6  285E               	goto	l1975
  1645  02A7  3002               	movlw	2
  1646  02A8  027D               	subwf	_cursor,w
  1647  02A9  1C03               	skipc
  1648  02AA  285E               	goto	l1975
  1649                           
  1650                           ;main.c: 691: {
  1651                           ;main.c: 692: rTrim(message);
  1652  02AB  30A0               	movlw	(low (_message| 0))& (0+255)
  1653  02AC  120A  158A  2742  120A  118A  	fcall	_rTrim
  1654                           
  1655                           ;main.c: 693: strncat(message, blank, 4);
  1656  02B1  3041               	movlw	(low (main@blank| 0))& (0+255)
  1657  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  1658  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  1659  02B4  00BE               	movwf	??_main
  1660  02B5  083E               	movf	??_main,w
  1661  02B6  00A5               	movwf	strncat@from
  1662  02B7  3004               	movlw	4
  1663  02B8  00A6               	movwf	strncat@size
  1664  02B9  3000               	movlw	0
  1665  02BA  00A7               	movwf	strncat@size+1
  1666  02BB  30A0               	movlw	(low (_message| 0))& (0+255)
  1667  02BC  120A  158A  26D0  120A  118A  	fcall	_strncat
  1668                           
  1669                           ;main.c: 694: button_pressed = DEFAULT;
  1670  02C1  1283               	bcf	3,5	;RP0=0, select bank0
  1671  02C2  1303               	bcf	3,6	;RP1=0, select bank0
  1672  02C3  01D5               	clrf	_button_pressed
  1673                           
  1674                           ;main.c: 695: save_in_eeprom();
  1675  02C4  120A  118A  2538  120A  118A  	fcall	_save_in_eeprom
  1676                           
  1677                           ;main.c: 696: button_pressed = B;
  1678  02C9  3004               	movlw	4
  1679  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  1680  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  1681  02CC  00BE               	movwf	??_main
  1682  02CD  083E               	movf	??_main,w
  1683  02CE  00D5               	movwf	_button_pressed
  1684                           
  1685                           ;main.c: 697: cursor = 6;
  1686  02CF  3006               	movlw	6
  1687  02D0  00BE               	movwf	??_main
  1688  02D1  083E               	movf	??_main,w
  1689  02D2  00FD               	movwf	_cursor
  1690                           
  1691                           ;main.c: 698: index = 0;
  1692  02D3  01DE               	clrf	_index
  1693  02D4  01DF               	clrf	_index+1
  1694                           
  1695                           ;main.c: 699: }
  1696                           ;main.c: 701: }
  1697  02D5  285E               	goto	l1975
  1698  02D6                     __end_of_main:	
  1699                           
  1700                           	psect	text1
  1701  0F7F                     __ptext1:	
  1702 ;; *************** function _strncpy *****************
  1703 ;; Defined at:
  1704 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strncpy.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  to              1    wreg     PTR unsigned char 
  1707 ;;		 -> buffer(7), 
  1708 ;;  from            2    5[BANK0 ] PTR const unsigned char 
  1709 ;;		 -> greeting_message(35), message(80), 
  1710 ;;  size            2    7[BANK0 ] unsigned int 
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;  to              1   13[BANK0 ] PTR unsigned char 
  1713 ;;		 -> buffer(7), 
  1714 ;;  cp              1   12[BANK0 ] PTR unsigned char 
  1715 ;;		 -> buffer(7), 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      PTR unsigned char 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1725 ;;      Params:         0       4       0       0       0
  1726 ;;      Locals:         0       2       0       0       0
  1727 ;;      Temps:          0       3       0       0       0
  1728 ;;      Totals:         0       9       0       0       0
  1729 ;;Total ram usage:        9 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; Hardware stack levels required when called:    4
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_main
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           
  1740                           ;psect for function _strncpy
  1741  0F7F                     _strncpy:	
  1742                           
  1743                           ;incstack = 0
  1744                           ; Regs used in _strncpy: [wreg-fsr0h+status,2+status,0]
  1745                           ;strncpy@to stored from wreg
  1746  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  1747  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  1748  0F81  00AD               	movwf	strncpy@to
  1749  0F82  082D               	movf	strncpy@to,w
  1750  0F83  00A9               	movwf	??_strncpy
  1751  0F84  0829               	movf	??_strncpy,w
  1752  0F85  00AC               	movwf	strncpy@cp
  1753  0F86                     l1729:	
  1754  0F86  0827               	movf	strncpy@size,w
  1755  0F87  0428               	iorwf	strncpy@size+1,w
  1756  0F88  1903               	btfsc	3,2
  1757  0F89  2FB1               	goto	l1735
  1758  0F8A  3001               	movlw	1
  1759  0F8B  02A7               	subwf	strncpy@size,f
  1760  0F8C  3000               	movlw	0
  1761  0F8D  1C03               	skipc
  1762  0F8E  03A8               	decf	strncpy@size+1,f
  1763  0F8F  02A8               	subwf	strncpy@size+1,f
  1764  0F90  0826               	movf	strncpy@from+1,w
  1765  0F91  00AA               	movwf	??_strncpy+1
  1766  0F92  0825               	movf	strncpy@from,w
  1767  0F93  00A9               	movwf	??_strncpy
  1768  0F94  0AA5               	incf	strncpy@from,f
  1769  0F95  1903               	skipnz
  1770  0F96  0AA6               	incf	strncpy@from+1,f
  1771  0F97  0829               	movf	??_strncpy,w
  1772  0F98  0084               	movwf	4
  1773  0F99  1783               	bsf	3,7
  1774  0F9A  1C2A               	btfss	??_strncpy+1,0
  1775  0F9B  1383               	bcf	3,7
  1776  0F9C  0800               	movf	0,w
  1777  0F9D  00AB               	movwf	??_strncpy+2
  1778  0F9E  082C               	movf	strncpy@cp,w
  1779  0F9F  0084               	movwf	4
  1780  0FA0  3001               	movlw	1
  1781  0FA1  07AC               	addwf	strncpy@cp,f
  1782  0FA2  082B               	movf	??_strncpy+2,w
  1783  0FA3  1383               	bcf	3,7	;select IRP bank0
  1784  0FA4  0080               	movwf	0
  1785  0FA5  0800               	movf	0,w
  1786  0FA6  1903               	btfsc	3,2
  1787  0FA7  2FB1               	goto	l1735
  1788  0FA8  2F86               	goto	l1729
  1789  0FA9                     l1731:	
  1790  0FA9  082C               	movf	strncpy@cp,w
  1791  0FAA  0084               	movwf	4
  1792  0FAB  1383               	bcf	3,7	;select IRP bank0
  1793  0FAC  0180               	clrf	0
  1794  0FAD  3001               	movlw	1
  1795  0FAE  00A9               	movwf	??_strncpy
  1796  0FAF  0829               	movf	??_strncpy,w
  1797  0FB0  07AC               	addwf	strncpy@cp,f
  1798  0FB1                     l1735:	
  1799  0FB1  3001               	movlw	1
  1800  0FB2  02A7               	subwf	strncpy@size,f
  1801  0FB3  3000               	movlw	0
  1802  0FB4  1C03               	skipc
  1803  0FB5  03A8               	decf	strncpy@size+1,f
  1804  0FB6  02A8               	subwf	strncpy@size+1,f
  1805  0FB7  0A27               	incf	strncpy@size,w
  1806  0FB8  1D03               	skipz
  1807  0FB9  2FA9               	goto	l1731
  1808  0FBA  0A28               	incf	strncpy@size+1,w
  1809  0FBB  1903               	btfsc	3,2
  1810  0FBC  0008               	return
  1811  0FBD  2FA9               	goto	l1731
  1812  0FBE                     __end_of_strncpy:	
  1813                           ;	Return value of _strncpy is never used
  1814                           
  1815                           
  1816                           	psect	text2
  1817  0ED0                     __ptext2:	
  1818 ;; *************** function _strncat *****************
  1819 ;; Defined at:
  1820 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strncat.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;  to              1    wreg     PTR unsigned char 
  1823 ;;		 -> message(80), 
  1824 ;;  from            1    5[BANK0 ] PTR const unsigned char 
  1825 ;;		 -> main@blank(5), 
  1826 ;;  size            2    6[BANK0 ] unsigned int 
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;  to              1    9[BANK0 ] PTR unsigned char 
  1829 ;;		 -> message(80), 
  1830 ;;  cp              1   10[BANK0 ] PTR unsigned char 
  1831 ;;		 -> message(80), 
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  1    wreg      PTR unsigned char 
  1834 ;; Registers used:
  1835 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1841 ;;      Params:         0       3       0       0       0
  1842 ;;      Locals:         0       2       0       0       0
  1843 ;;      Temps:          0       1       0       0       0
  1844 ;;      Totals:         0       6       0       0       0
  1845 ;;Total ram usage:        6 bytes
  1846 ;; Hardware stack levels used:    1
  1847 ;; Hardware stack levels required when called:    4
  1848 ;; This function calls:
  1849 ;;		Nothing
  1850 ;; This function is called by:
  1851 ;;		_main
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           
  1856                           ;psect for function _strncat
  1857  0ED0                     _strncat:	
  1858                           
  1859                           ;incstack = 0
  1860                           ; Regs used in _strncat: [wreg-fsr0h+status,2+status,0]
  1861                           ;strncat@to stored from wreg
  1862  0ED0  1283               	bcf	3,5	;RP0=0, select bank0
  1863  0ED1  1303               	bcf	3,6	;RP1=0, select bank0
  1864  0ED2  00A9               	movwf	strncat@to
  1865  0ED3  0829               	movf	strncat@to,w
  1866  0ED4  00A8               	movwf	??_strncat
  1867  0ED5  0828               	movf	??_strncat,w
  1868  0ED6  00AA               	movwf	strncat@cp
  1869  0ED7                     l1741:	
  1870  0ED7  082A               	movf	strncat@cp,w
  1871  0ED8  0084               	movwf	4
  1872  0ED9  1383               	bcf	3,7	;select IRP bank0
  1873  0EDA  0800               	movf	0,w
  1874  0EDB  1903               	btfsc	3,2
  1875  0EDC  2EF0               	goto	l1749
  1876  0EDD  3001               	movlw	1
  1877  0EDE  00A8               	movwf	??_strncat
  1878  0EDF  0828               	movf	??_strncat,w
  1879  0EE0  07AA               	addwf	strncat@cp,f
  1880  0EE1  2ED7               	goto	l1741
  1881  0EE2                     l1743:	
  1882  0EE2  3001               	movlw	1
  1883  0EE3  02A6               	subwf	strncat@size,f
  1884  0EE4  3000               	movlw	0
  1885  0EE5  1C03               	skipc
  1886  0EE6  03A7               	decf	strncat@size+1,f
  1887  0EE7  02A7               	subwf	strncat@size+1,f
  1888  0EE8  3001               	movlw	1
  1889  0EE9  00A8               	movwf	??_strncat
  1890  0EEA  0828               	movf	??_strncat,w
  1891  0EEB  07AA               	addwf	strncat@cp,f
  1892  0EEC  3001               	movlw	1
  1893  0EED  00A8               	movwf	??_strncat
  1894  0EEE  0828               	movf	??_strncat,w
  1895  0EEF  07A5               	addwf	strncat@from,f
  1896  0EF0                     l1749:	
  1897  0EF0  0826               	movf	strncat@size,w
  1898  0EF1  0427               	iorwf	strncat@size+1,w
  1899  0EF2  1903               	btfsc	3,2
  1900  0EF3  2EFF               	goto	l1753
  1901  0EF4  0825               	movf	strncat@from,w
  1902  0EF5  0084               	movwf	4
  1903  0EF6  0800               	movf	0,w
  1904  0EF7  00A8               	movwf	??_strncat
  1905  0EF8  082A               	movf	strncat@cp,w
  1906  0EF9  0084               	movwf	4
  1907  0EFA  0828               	movf	??_strncat,w
  1908  0EFB  0080               	movwf	0
  1909  0EFC  0800               	movf	0,w
  1910  0EFD  1D03               	btfss	3,2
  1911  0EFE  2EE2               	goto	l1743
  1912  0EFF                     l1753:	
  1913  0EFF  0826               	movf	strncat@size,w
  1914  0F00  0427               	iorwf	strncat@size+1,w
  1915  0F01  1D03               	btfss	3,2
  1916  0F02  0008               	return
  1917  0F03  082A               	movf	strncat@cp,w
  1918  0F04  0084               	movwf	4
  1919  0F05  0180               	clrf	0
  1920  0F06  0008               	return
  1921  0F07                     __end_of_strncat:	
  1922                           ;	Return value of _strncat is never used
  1923                           
  1924                           
  1925                           	psect	text3
  1926  0538                     __ptext3:	
  1927 ;; *************** function _save_in_eeprom *****************
  1928 ;; Defined at:
  1929 ;;		line 222 in file "main.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;		None
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;  j               2   22[BANK0 ] int 
  1934 ;;  message_leng    1   21[BANK0 ] unsigned char 
  1935 ;;  temp            1   20[BANK0 ] unsigned char 
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  1    wreg      void 
  1938 ;; Registers used:
  1939 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1945 ;;      Params:         0       0       0       0       0
  1946 ;;      Locals:         0       4       0       0       0
  1947 ;;      Temps:          0       2       0       0       0
  1948 ;;      Totals:         0       6       0       0       0
  1949 ;;Total ram usage:        6 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    6
  1952 ;; This function calls:
  1953 ;;		_clear
  1954 ;;		_delay
  1955 ;;		_eeprom_write
  1956 ;;		_strlen
  1957 ;; This function is called by:
  1958 ;;		_main
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           
  1963                           ;psect for function _save_in_eeprom
  1964  0538                     _save_in_eeprom:	
  1965                           
  1966                           ;main.c: 224: int j;
  1967                           ;main.c: 225: char temp;
  1968                           ;main.c: 226: char message_length;
  1969                           ;main.c: 227: message_length = strlen(message);
  1970                           
  1971                           ;incstack = 0
  1972                           ; Regs used in _save_in_eeprom: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1973  0538  30A0               	movlw	(low (_message| 0))& (0+255)
  1974  0539  1283               	bcf	3,5	;RP0=0, select bank0
  1975  053A  1303               	bcf	3,6	;RP1=0, select bank0
  1976  053B  00A5               	movwf	strlen@s
  1977  053C  3000               	movlw	0
  1978  053D  00A6               	movwf	strlen@s+1
  1979  053E  120A  158A  25D9  120A  118A  	fcall	_strlen
  1980  0543  1283               	bcf	3,5	;RP0=0, select bank0
  1981  0544  1303               	bcf	3,6	;RP1=0, select bank0
  1982  0545  0825               	movf	?_strlen,w
  1983  0546  00B2               	movwf	??_save_in_eeprom
  1984  0547  0832               	movf	??_save_in_eeprom,w
  1985  0548  00B5               	movwf	save_in_eeprom@message_length
  1986                           
  1987                           ;main.c: 228: eeprom_write(0, message_length);
  1988  0549  0835               	movf	save_in_eeprom@message_length,w
  1989  054A  00B2               	movwf	??_save_in_eeprom
  1990  054B  0832               	movf	??_save_in_eeprom,w
  1991  054C  00A5               	movwf	eeprom_write@value
  1992  054D  3000               	movlw	0
  1993  054E  120A  118A  25CF  120A  118A  	fcall	_eeprom_write
  1994                           
  1995                           ;main.c: 229: for (j = 1; j <= message_length; j++)
  1996  0553  3001               	movlw	1
  1997  0554  1283               	bcf	3,5	;RP0=0, select bank0
  1998  0555  1303               	bcf	3,6	;RP1=0, select bank0
  1999  0556  00B6               	movwf	save_in_eeprom@j
  2000  0557  3000               	movlw	0
  2001  0558  00B7               	movwf	save_in_eeprom@j+1
  2002  0559                     l1647:	
  2003  0559  0837               	movf	save_in_eeprom@j+1,w
  2004  055A  3A80               	xorlw	128
  2005  055B  3C80               	sublw	128
  2006  055C  1D03               	skipz
  2007  055D  2D60               	goto	u1525
  2008  055E  0836               	movf	save_in_eeprom@j,w
  2009  055F  0235               	subwf	save_in_eeprom@message_length,w
  2010  0560                     u1525:	
  2011  0560  1C03               	btfss	3,0
  2012  0561  2D8A               	goto	l1649
  2013                           
  2014                           ;main.c: 230: {
  2015                           ;main.c: 231: temp = message[j - 1];
  2016  0562  1283               	bcf	3,5	;RP0=0, select bank0
  2017  0563  1303               	bcf	3,6	;RP1=0, select bank0
  2018  0564  0836               	movf	save_in_eeprom@j,w
  2019  0565  3EFF               	addlw	255
  2020  0566  3EA0               	addlw	(low (_message| 0))& (0+255)
  2021  0567  0084               	movwf	4
  2022  0568  1383               	bcf	3,7	;select IRP bank1
  2023  0569  0800               	movf	0,w
  2024  056A  00B2               	movwf	??_save_in_eeprom
  2025  056B  0832               	movf	??_save_in_eeprom,w
  2026  056C  00B4               	movwf	save_in_eeprom@temp
  2027                           
  2028                           ;main.c: 232: eeprom_write(j, temp);
  2029  056D  0834               	movf	save_in_eeprom@temp,w
  2030  056E  00B2               	movwf	??_save_in_eeprom
  2031  056F  0832               	movf	??_save_in_eeprom,w
  2032  0570  00A5               	movwf	eeprom_write@value
  2033  0571  0836               	movf	save_in_eeprom@j,w
  2034  0572  120A  118A  25CF  120A  118A  	fcall	_eeprom_write
  2035                           
  2036                           ;main.c: 233: _delay((unsigned long)((1)*(8000000/4000.0)));
  2037  0577  3003               	movlw	3
  2038  0578  1283               	bcf	3,5	;RP0=0, select bank0
  2039  0579  1303               	bcf	3,6	;RP1=0, select bank0
  2040  057A  00B3               	movwf	??_save_in_eeprom+1
  2041  057B  3097               	movlw	151
  2042  057C  00B2               	movwf	??_save_in_eeprom
  2043  057D                     u2637:	
  2044  057D  0BB2               	decfsz	??_save_in_eeprom,f
  2045  057E  2D7D               	goto	u2637
  2046  057F  0BB3               	decfsz	??_save_in_eeprom+1,f
  2047  0580  2D7D               	goto	u2637
  2048  0581  3001               	movlw	1
  2049  0582  1283               	bcf	3,5	;RP0=0, select bank0
  2050  0583  1303               	bcf	3,6	;RP1=0, select bank0
  2051  0584  07B6               	addwf	save_in_eeprom@j,f
  2052  0585  1803               	skipnc
  2053  0586  0AB7               	incf	save_in_eeprom@j+1,f
  2054  0587  3000               	movlw	0
  2055  0588  07B7               	addwf	save_in_eeprom@j+1,f
  2056  0589  2D59               	goto	l1647
  2057  058A                     l1649:	
  2058                           
  2059                           ;main.c: 234: }
  2060                           ;main.c: 235: _delay((unsigned long)((20)*(8000000/4000.0)));
  2061  058A  3034               	movlw	52
  2062  058B  1283               	bcf	3,5	;RP0=0, select bank0
  2063  058C  1303               	bcf	3,6	;RP1=0, select bank0
  2064  058D  00B3               	movwf	??_save_in_eeprom+1
  2065  058E  30F1               	movlw	241
  2066  058F  00B2               	movwf	??_save_in_eeprom
  2067  0590                     u2647:	
  2068  0590  0BB2               	decfsz	??_save_in_eeprom,f
  2069  0591  2D90               	goto	u2647
  2070  0592  0BB3               	decfsz	??_save_in_eeprom+1,f
  2071  0593  2D90               	goto	u2647
  2072                           
  2073                           ;main.c: 236: cursor = 7;
  2074  0594  3007               	movlw	7
  2075  0595  1283               	bcf	3,5	;RP0=0, select bank0
  2076  0596  1303               	bcf	3,6	;RP1=0, select bank0
  2077  0597  00B2               	movwf	??_save_in_eeprom
  2078  0598  0832               	movf	??_save_in_eeprom,w
  2079  0599  00FD               	movwf	_cursor
  2080                           
  2081                           ;main.c: 237: buffer[0] = 'S';
  2082  059A  3053               	movlw	83
  2083  059B  00B2               	movwf	??_save_in_eeprom
  2084  059C  0832               	movf	??_save_in_eeprom,w
  2085  059D  00D7               	movwf	_buffer
  2086                           
  2087                           ;main.c: 238: buffer[1] = 'T';
  2088  059E  3054               	movlw	84
  2089  059F  00B2               	movwf	??_save_in_eeprom
  2090  05A0  0832               	movf	??_save_in_eeprom,w
  2091  05A1  00D8               	movwf	_buffer+1
  2092                           
  2093                           ;main.c: 239: buffer[2] = 'O';
  2094  05A2  304F               	movlw	79
  2095  05A3  00B2               	movwf	??_save_in_eeprom
  2096  05A4  0832               	movf	??_save_in_eeprom,w
  2097  05A5  00D9               	movwf	_buffer+2
  2098                           
  2099                           ;main.c: 240: buffer[3] = 'R';
  2100  05A6  3052               	movlw	82
  2101  05A7  00B2               	movwf	??_save_in_eeprom
  2102  05A8  0832               	movf	??_save_in_eeprom,w
  2103  05A9  00DA               	movwf	_buffer+3
  2104                           
  2105                           ;main.c: 241: buffer[4] = 'E';
  2106  05AA  3045               	movlw	69
  2107  05AB  00B2               	movwf	??_save_in_eeprom
  2108  05AC  0832               	movf	??_save_in_eeprom,w
  2109  05AD  00DB               	movwf	_buffer+4
  2110                           
  2111                           ;main.c: 242: buffer[5] = 'D';
  2112  05AE  3044               	movlw	68
  2113  05AF  00B2               	movwf	??_save_in_eeprom
  2114  05B0  0832               	movf	??_save_in_eeprom,w
  2115  05B1  00DC               	movwf	_buffer+5
  2116                           
  2117                           ;main.c: 243: delay();
  2118  05B2  120A  158A  25B9  120A  118A  	fcall	_delay
  2119                           
  2120                           ;main.c: 244: delay();
  2121  05B7  120A  158A  25B9  120A  118A  	fcall	_delay
  2122                           
  2123                           ;main.c: 245: delay();
  2124  05BC  120A  158A  25B9  120A  118A  	fcall	_delay
  2125                           
  2126                           ;main.c: 246: delay();
  2127  05C1  120A  158A  25B9  120A  118A  	fcall	_delay
  2128                           
  2129                           ;main.c: 247: delay();
  2130  05C6  120A  158A  25B9  120A  118A  	fcall	_delay
  2131                           
  2132                           ;main.c: 248: clear();
  2133  05CB  120A  118A  26F7   	fcall	_clear
  2134  05CE  0008               	return
  2135  05CF                     __end_of_save_in_eeprom:	
  2136                           
  2137                           	psect	text4
  2138  05CF                     __ptext4:	
  2139 ;; *************** function _eeprom_write *****************
  2140 ;; Defined at:
  2141 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\pic\eewrite.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;  addr            1    wreg     unsigned char 
  2144 ;;  value           1    5[BANK0 ] unsigned char 
  2145 ;; Auto vars:     Size  Location     Type
  2146 ;;  addr            1    7[BANK0 ] unsigned char 
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      void 
  2149 ;; Registers used:
  2150 ;;		wreg, status,2, status,0
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2156 ;;      Params:         0       1       0       0       0
  2157 ;;      Locals:         0       1       0       0       0
  2158 ;;      Temps:          0       1       0       0       0
  2159 ;;      Totals:         0       3       0       0       0
  2160 ;;Total ram usage:        3 bytes
  2161 ;; Hardware stack levels used:    1
  2162 ;; Hardware stack levels required when called:    4
  2163 ;; This function calls:
  2164 ;;		Nothing
  2165 ;; This function is called by:
  2166 ;;		_save_in_eeprom
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           
  2171                           ;psect for function _eeprom_write
  2172  05CF                     _eeprom_write:	
  2173                           
  2174                           ;incstack = 0
  2175                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  2176                           ;eeprom_write@addr stored from wreg
  2177  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  2178  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  2179  05D1  00A7               	movwf	eeprom_write@addr
  2180  05D2                     l291:	
  2181  05D2  1683               	bsf	3,5	;RP0=1, select bank3
  2182  05D3  1703               	bsf	3,6	;RP1=1, select bank3
  2183  05D4  188C               	btfsc	12,1	;volsfr
  2184  05D5  2DD2               	goto	l291
  2185  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  2186  05D7  1303               	bcf	3,6	;RP1=0, select bank0
  2187  05D8  0827               	movf	eeprom_write@addr,w
  2188  05D9  1283               	bcf	3,5	;RP0=0, select bank2
  2189  05DA  1703               	bsf	3,6	;RP1=1, select bank2
  2190  05DB  008D               	movwf	13	;volatile
  2191  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  2192  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  2193  05DE  0825               	movf	eeprom_write@value,w
  2194  05DF  1283               	bcf	3,5	;RP0=0, select bank2
  2195  05E0  1703               	bsf	3,6	;RP1=1, select bank2
  2196  05E1  008C               	movwf	12	;volatile
  2197  05E2  303F               	movlw	63
  2198  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  2199  05E4  1303               	bcf	3,6	;RP1=0, select bank0
  2200  05E5  00A6               	movwf	??_eeprom_write
  2201  05E6  0826               	movf	??_eeprom_write,w
  2202  05E7  1683               	bsf	3,5	;RP0=1, select bank3
  2203  05E8  1703               	bsf	3,6	;RP1=1, select bank3
  2204  05E9  058C               	andwf	12,f	;volsfr
  2205  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  2206  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  2207  05EC  1003               	bcf	3,0	;volatile
  2208  05ED  1B8B               	btfsc	11,7	;volatile
  2209  05EE  1403               	bsf	3,0	;volatile
  2210  05EF  138B               	bcf	11,7	;volatile
  2211  05F0  1683               	bsf	3,5	;RP0=1, select bank3
  2212  05F1  1703               	bsf	3,6	;RP1=1, select bank3
  2213  05F2  150C               	bsf	12,2	;volsfr
  2214  05F3  3055               	movlw	85
  2215  05F4  008D               	movwf	13	;volsfr
  2216  05F5  30AA               	movlw	170
  2217  05F6  008D               	movwf	13	;volsfr
  2218  05F7  148C               	bsf	12,1	;volsfr
  2219  05F8  110C               	bcf	12,2	;volsfr
  2220  05F9  1283               	bcf	3,5	;RP0=0, select bank0
  2221  05FA  1303               	bcf	3,6	;RP1=0, select bank0
  2222  05FB  1C03               	btfss	3,0	;volatile
  2223  05FC  0008               	return
  2224  05FD  178B               	bsf	11,7	;volatile
  2225  05FE  0008               	return
  2226  05FF                     __end_of_eeprom_write:	
  2227                           
  2228                           	psect	text5
  2229  06F7                     __ptext5:	
  2230 ;; *************** function _clear *****************
  2231 ;; Defined at:
  2232 ;;		line 146 in file "main.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;		None
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;  m               2   16[BANK0 ] int 
  2237 ;;  n               2   14[BANK0 ] int 
  2238 ;;  message_leng    2   12[BANK0 ] short 
  2239 ;; Return value:  Size  Location     Type
  2240 ;;                  1    wreg      void 
  2241 ;; Registers used:
  2242 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2243 ;; Tracked objects:
  2244 ;;		On entry : 0/0
  2245 ;;		On exit  : 0/0
  2246 ;;		Unchanged: 0/0
  2247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2248 ;;      Params:         0       0       0       0       0
  2249 ;;      Locals:         0       6       0       0       0
  2250 ;;      Temps:          0       1       0       0       0
  2251 ;;      Totals:         0       7       0       0       0
  2252 ;;Total ram usage:        7 bytes
  2253 ;; Hardware stack levels used:    1
  2254 ;; Hardware stack levels required when called:    5
  2255 ;; This function calls:
  2256 ;;		_strlen
  2257 ;; This function is called by:
  2258 ;;		_save_in_eeprom
  2259 ;;		_main
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           
  2264                           ;psect for function _clear
  2265  06F7                     _clear:	
  2266                           
  2267                           ;main.c: 148: int m;
  2268                           ;main.c: 149: int n;
  2269                           ;main.c: 150: short message_length;
  2270                           ;main.c: 151: button_pressed = DEFAULT;
  2271                           
  2272                           ;incstack = 0
  2273                           ; Regs used in _clear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2274  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  2275  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  2276  06F9  01D5               	clrf	_button_pressed
  2277                           
  2278                           ;main.c: 152: message_length = strlen(message);
  2279  06FA  30A0               	movlw	(low (_message| 0))& (0+255)
  2280  06FB  00A5               	movwf	strlen@s
  2281  06FC  3000               	movlw	0
  2282  06FD  00A6               	movwf	strlen@s+1
  2283  06FE  120A  158A  25D9  120A  118A  	fcall	_strlen
  2284  0703  1283               	bcf	3,5	;RP0=0, select bank0
  2285  0704  1303               	bcf	3,6	;RP1=0, select bank0
  2286  0705  0826               	movf	?_strlen+1,w
  2287  0706  00AD               	movwf	clear@message_length+1
  2288  0707  0825               	movf	?_strlen,w
  2289  0708  00AC               	movwf	clear@message_length
  2290                           
  2291                           ;main.c: 153: cursor = 0;
  2292  0709  01FD               	clrf	_cursor
  2293                           
  2294                           ;main.c: 155: for (m = 0; m <= 5; m++)
  2295  070A  01B0               	clrf	clear@m
  2296  070B  01B1               	clrf	clear@m+1
  2297  070C  0831               	movf	clear@m+1,w
  2298  070D  3A80               	xorlw	128
  2299  070E  00FF               	movwf	127
  2300  070F  3080               	movlw	128
  2301  0710  027F               	subwf	127,w
  2302  0711  1D03               	skipz
  2303  0712  2F15               	goto	u1335
  2304  0713  3006               	movlw	6
  2305  0714  0230               	subwf	clear@m,w
  2306  0715                     u1335:	
  2307  0715  1803               	btfsc	3,0
  2308  0716  2F32               	goto	l1503
  2309  0717                     l1497:	
  2310                           
  2311                           ;main.c: 156: {
  2312                           ;main.c: 157: buffer[m] = ' ';
  2313  0717  3020               	movlw	32
  2314  0718  1283               	bcf	3,5	;RP0=0, select bank0
  2315  0719  1303               	bcf	3,6	;RP1=0, select bank0
  2316  071A  00AB               	movwf	??_clear
  2317  071B  0830               	movf	clear@m,w
  2318  071C  3E57               	addlw	(low (_buffer| 0))& (0+255)
  2319  071D  0084               	movwf	4
  2320  071E  082B               	movf	??_clear,w
  2321  071F  1383               	bcf	3,7	;select IRP bank0
  2322  0720  0080               	movwf	0
  2323  0721  3001               	movlw	1
  2324  0722  07B0               	addwf	clear@m,f
  2325  0723  1803               	skipnc
  2326  0724  0AB1               	incf	clear@m+1,f
  2327  0725  3000               	movlw	0
  2328  0726  07B1               	addwf	clear@m+1,f
  2329  0727  0831               	movf	clear@m+1,w
  2330  0728  3A80               	xorlw	128
  2331  0729  00FF               	movwf	127
  2332  072A  3080               	movlw	128
  2333  072B  027F               	subwf	127,w
  2334  072C  1D03               	skipz
  2335  072D  2F30               	goto	u1345
  2336  072E  3006               	movlw	6
  2337  072F  0230               	subwf	clear@m,w
  2338  0730                     u1345:	
  2339  0730  1C03               	skipc
  2340  0731  2F17               	goto	l1497
  2341  0732                     l1503:	
  2342                           
  2343                           ;main.c: 158: }
  2344                           ;main.c: 159: for (n = 0; n <= message_length; n++)
  2345  0732  1283               	bcf	3,5	;RP0=0, select bank0
  2346  0733  1303               	bcf	3,6	;RP1=0, select bank0
  2347  0734  01AE               	clrf	clear@n
  2348  0735  01AF               	clrf	clear@n+1
  2349  0736                     l1509:	
  2350  0736  082D               	movf	clear@message_length+1,w
  2351  0737  3A80               	xorlw	128
  2352  0738  00AB               	movwf	??_clear
  2353  0739  082F               	movf	clear@n+1,w
  2354  073A  3A80               	xorlw	128
  2355  073B  022B               	subwf	??_clear,w
  2356  073C  1D03               	skipz
  2357  073D  2F40               	goto	u1355
  2358  073E  082E               	movf	clear@n,w
  2359  073F  022C               	subwf	clear@message_length,w
  2360  0740                     u1355:	
  2361  0740  1C03               	btfss	3,0
  2362  0741  2F53               	goto	l1511
  2363                           
  2364                           ;main.c: 160: {
  2365                           ;main.c: 161: message[n] = ' ';
  2366  0742  3020               	movlw	32
  2367  0743  1283               	bcf	3,5	;RP0=0, select bank0
  2368  0744  1303               	bcf	3,6	;RP1=0, select bank0
  2369  0745  00AB               	movwf	??_clear
  2370  0746  082E               	movf	clear@n,w
  2371  0747  3EA0               	addlw	(low (_message| 0))& (0+255)
  2372  0748  0084               	movwf	4
  2373  0749  082B               	movf	??_clear,w
  2374  074A  1383               	bcf	3,7	;select IRP bank1
  2375  074B  0080               	movwf	0
  2376  074C  3001               	movlw	1
  2377  074D  07AE               	addwf	clear@n,f
  2378  074E  1803               	skipnc
  2379  074F  0AAF               	incf	clear@n+1,f
  2380  0750  3000               	movlw	0
  2381  0751  07AF               	addwf	clear@n+1,f
  2382  0752  2F36               	goto	l1509
  2383  0753                     l1511:	
  2384                           
  2385                           ;main.c: 162: }
  2386                           ;main.c: 164: character = '_';
  2387  0753  305F               	movlw	95
  2388  0754  1283               	bcf	3,5	;RP0=0, select bank0
  2389  0755  1303               	bcf	3,6	;RP1=0, select bank0
  2390  0756  00AB               	movwf	??_clear
  2391  0757  082B               	movf	??_clear,w
  2392  0758  00D6               	movwf	_character
  2393  0759  0008               	return
  2394  075A                     __end_of_clear:	
  2395                           
  2396                           	psect	text6
  2397  0DD9                     __ptext6:	
  2398 ;; *************** function _strlen *****************
  2399 ;; Defined at:
  2400 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strlen.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;  s               2    5[BANK0 ] PTR const unsigned char 
  2403 ;;		 -> greeting_message(35), buffer(7), message(80), 
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;  cp              2    9[BANK0 ] PTR const unsigned char 
  2406 ;;		 -> greeting_message(35), buffer(7), message(80), 
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  2    5[BANK0 ] unsigned int 
  2409 ;; Registers used:
  2410 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2416 ;;      Params:         0       2       0       0       0
  2417 ;;      Locals:         0       2       0       0       0
  2418 ;;      Temps:          0       2       0       0       0
  2419 ;;      Totals:         0       6       0       0       0
  2420 ;;Total ram usage:        6 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    4
  2423 ;; This function calls:
  2424 ;;		Nothing
  2425 ;; This function is called by:
  2426 ;;		_clear
  2427 ;;		_save_in_eeprom
  2428 ;;		_main
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           
  2433                           ;psect for function _strlen
  2434  0DD9                     _strlen:	
  2435                           
  2436                           ;incstack = 0
  2437                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  2438  0DD9  1283               	bcf	3,5	;RP0=0, select bank0
  2439  0DDA  1303               	bcf	3,6	;RP1=0, select bank0
  2440  0DDB  0825               	movf	strlen@s,w
  2441  0DDC  00A9               	movwf	strlen@cp
  2442  0DDD  0826               	movf	strlen@s+1,w
  2443  0DDE  00AA               	movwf	strlen@cp+1
  2444  0DDF                     l1479:	
  2445  0DDF  0829               	movf	strlen@cp,w
  2446  0DE0  0084               	movwf	4
  2447  0DE1  1783               	bsf	3,7
  2448  0DE2  1C2A               	btfss	strlen@cp+1,0
  2449  0DE3  1383               	bcf	3,7
  2450  0DE4  0800               	movf	0,w
  2451  0DE5  1903               	btfsc	3,2
  2452  0DE6  2DEC               	goto	l1481
  2453  0DE7  3001               	movlw	1
  2454  0DE8  07A9               	addwf	strlen@cp,f
  2455  0DE9  1803               	skipnc
  2456  0DEA  0AAA               	incf	strlen@cp+1,f
  2457  0DEB  2DDF               	goto	l1479
  2458  0DEC                     l1481:	
  2459  0DEC  0925               	comf	strlen@s,w
  2460  0DED  00A7               	movwf	??_strlen
  2461  0DEE  0926               	comf	strlen@s+1,w
  2462  0DEF  00A8               	movwf	??_strlen+1
  2463  0DF0  0AA7               	incf	??_strlen,f
  2464  0DF1  1903               	skipnz
  2465  0DF2  0AA8               	incf	??_strlen+1,f
  2466  0DF3  0829               	movf	strlen@cp,w
  2467  0DF4  0727               	addwf	??_strlen,w
  2468  0DF5  00A5               	movwf	?_strlen
  2469  0DF6  082A               	movf	strlen@cp+1,w
  2470  0DF7  1803               	skipnc
  2471  0DF8  0A2A               	incf	strlen@cp+1,w
  2472  0DF9  0728               	addwf	??_strlen+1,w
  2473  0DFA  00A6               	movwf	?_strlen+1
  2474  0DFB  0008               	return
  2475  0DFC                     __end_of_strlen:	
  2476                           
  2477                           	psect	text7
  2478  0E9B                     __ptext7:	
  2479 ;; *************** function _read_eeprom *****************
  2480 ;; Defined at:
  2481 ;;		line 251 in file "main.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;		None
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  j               2   10[BANK0 ] int 
  2486 ;;  message_leng    1    9[BANK0 ] unsigned char 
  2487 ;;  temp            1    8[BANK0 ] unsigned char 
  2488 ;; Return value:  Size  Location     Type
  2489 ;;                  1    wreg      void 
  2490 ;; Registers used:
  2491 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2492 ;; Tracked objects:
  2493 ;;		On entry : 0/0
  2494 ;;		On exit  : 0/0
  2495 ;;		Unchanged: 0/0
  2496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2497 ;;      Params:         0       0       0       0       0
  2498 ;;      Locals:         0       4       0       0       0
  2499 ;;      Temps:          0       1       0       0       0
  2500 ;;      Totals:         0       5       0       0       0
  2501 ;;Total ram usage:        5 bytes
  2502 ;; Hardware stack levels used:    1
  2503 ;; Hardware stack levels required when called:    5
  2504 ;; This function calls:
  2505 ;;		_eeprom_read
  2506 ;; This function is called by:
  2507 ;;		_main
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           
  2512                           ;psect for function _read_eeprom
  2513  0E9B                     _read_eeprom:	
  2514                           
  2515                           ;main.c: 253: int j;
  2516                           ;main.c: 254: char temp;
  2517                           ;main.c: 255: char message_length;
  2518                           ;main.c: 256: message_length = eeprom_read(0);
  2519                           
  2520                           ;incstack = 0
  2521                           ; Regs used in _read_eeprom: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2522  0E9B  3000               	movlw	0
  2523  0E9C  120A  158A  261F  120A  158A  	fcall	_eeprom_read
  2524  0EA1  1283               	bcf	3,5	;RP0=0, select bank0
  2525  0EA2  1303               	bcf	3,6	;RP1=0, select bank0
  2526  0EA3  00A7               	movwf	??_read_eeprom
  2527  0EA4  0827               	movf	??_read_eeprom,w
  2528  0EA5  00A9               	movwf	read_eeprom@message_length
  2529                           
  2530                           ;main.c: 257: for (j = 1; j <= message_length; j++)
  2531  0EA6  3001               	movlw	1
  2532  0EA7  00AA               	movwf	read_eeprom@j
  2533  0EA8  3000               	movlw	0
  2534  0EA9  00AB               	movwf	read_eeprom@j+1
  2535  0EAA                     l1673:	
  2536  0EAA  082B               	movf	read_eeprom@j+1,w
  2537  0EAB  3A80               	xorlw	128
  2538  0EAC  3C80               	sublw	128
  2539  0EAD  1D03               	skipz
  2540  0EAE  2EB1               	goto	u1535
  2541  0EAF  082A               	movf	read_eeprom@j,w
  2542  0EB0  0229               	subwf	read_eeprom@message_length,w
  2543  0EB1                     u1535:	
  2544  0EB1  1C03               	btfss	3,0
  2545  0EB2  0008               	return
  2546                           
  2547                           ;main.c: 258: {
  2548                           ;main.c: 259: temp = eeprom_read(j);
  2549  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  2550  0EB4  1303               	bcf	3,6	;RP1=0, select bank0
  2551  0EB5  082A               	movf	read_eeprom@j,w
  2552  0EB6  120A  158A  261F  120A  158A  	fcall	_eeprom_read
  2553  0EBB  1283               	bcf	3,5	;RP0=0, select bank0
  2554  0EBC  1303               	bcf	3,6	;RP1=0, select bank0
  2555  0EBD  00A7               	movwf	??_read_eeprom
  2556  0EBE  0827               	movf	??_read_eeprom,w
  2557  0EBF  00A8               	movwf	read_eeprom@temp
  2558                           
  2559                           ;main.c: 260: message[j - 1] = temp;
  2560  0EC0  0828               	movf	read_eeprom@temp,w
  2561  0EC1  00A7               	movwf	??_read_eeprom
  2562  0EC2  082A               	movf	read_eeprom@j,w
  2563  0EC3  3EFF               	addlw	255
  2564  0EC4  3EA0               	addlw	(low (_message| 0))& (0+255)
  2565  0EC5  0084               	movwf	4
  2566  0EC6  0827               	movf	??_read_eeprom,w
  2567  0EC7  1383               	bcf	3,7	;select IRP bank1
  2568  0EC8  0080               	movwf	0
  2569  0EC9  3001               	movlw	1
  2570  0ECA  07AA               	addwf	read_eeprom@j,f
  2571  0ECB  1803               	skipnc
  2572  0ECC  0AAB               	incf	read_eeprom@j+1,f
  2573  0ECD  3000               	movlw	0
  2574  0ECE  07AB               	addwf	read_eeprom@j+1,f
  2575  0ECF  2EAA               	goto	l1673
  2576  0ED0                     __end_of_read_eeprom:	
  2577                           
  2578                           	psect	text8
  2579  0E1F                     __ptext8:	
  2580 ;; *************** function _eeprom_read *****************
  2581 ;; Defined at:
  2582 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\pic\eeread.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;  addr            1    wreg     unsigned char 
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  addr            1    6[BANK0 ] unsigned char 
  2587 ;; Return value:  Size  Location     Type
  2588 ;;                  1    wreg      unsigned char 
  2589 ;; Registers used:
  2590 ;;		wreg, status,2, status,0
  2591 ;; Tracked objects:
  2592 ;;		On entry : 0/0
  2593 ;;		On exit  : 0/0
  2594 ;;		Unchanged: 0/0
  2595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2596 ;;      Params:         0       0       0       0       0
  2597 ;;      Locals:         0       1       0       0       0
  2598 ;;      Temps:          0       1       0       0       0
  2599 ;;      Totals:         0       2       0       0       0
  2600 ;;Total ram usage:        2 bytes
  2601 ;; Hardware stack levels used:    1
  2602 ;; Hardware stack levels required when called:    4
  2603 ;; This function calls:
  2604 ;;		Nothing
  2605 ;; This function is called by:
  2606 ;;		_read_eeprom
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           
  2611                           ;psect for function _eeprom_read
  2612  0E1F                     _eeprom_read:	
  2613                           
  2614                           ;incstack = 0
  2615                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  2616                           ;eeprom_read@addr stored from wreg
  2617  0E1F  1283               	bcf	3,5	;RP0=0, select bank0
  2618  0E20  1303               	bcf	3,6	;RP1=0, select bank0
  2619  0E21  00A6               	movwf	eeprom_read@addr
  2620  0E22  2E25               	goto	l269
  2621  0E23                     u1401:	
  2622  0E23  1283               	bcf	3,5	;RP0=0, select bank0
  2623  0E24  1303               	bcf	3,6	;RP1=0, select bank0
  2624  0E25                     l269:	
  2625  0E25  0064               	clrwdt	;# 
  2626  0E26  1683               	bsf	3,5	;RP0=1, select bank3
  2627  0E27  1703               	bsf	3,6	;RP1=1, select bank3
  2628  0E28  188C               	btfsc	12,1	;volsfr
  2629  0E29  2E23               	goto	u1401
  2630  0E2A  1283               	bcf	3,5	;RP0=0, select bank0
  2631  0E2B  1303               	bcf	3,6	;RP1=0, select bank0
  2632  0E2C  0826               	movf	eeprom_read@addr,w
  2633  0E2D  1283               	bcf	3,5	;RP0=0, select bank2
  2634  0E2E  1703               	bsf	3,6	;RP1=1, select bank2
  2635  0E2F  008D               	movwf	13	;volatile
  2636  0E30  303F               	movlw	63
  2637  0E31  1283               	bcf	3,5	;RP0=0, select bank0
  2638  0E32  1303               	bcf	3,6	;RP1=0, select bank0
  2639  0E33  00A5               	movwf	??_eeprom_read
  2640  0E34  0825               	movf	??_eeprom_read,w
  2641  0E35  1683               	bsf	3,5	;RP0=1, select bank3
  2642  0E36  1703               	bsf	3,6	;RP1=1, select bank3
  2643  0E37  058C               	andwf	12,f	;volsfr
  2644  0E38  140C               	bsf	12,0	;volsfr
  2645  0E39  1003               	clrc
  2646  0E3A  180C               	btfsc	12,0	;volsfr
  2647  0E3B  1403               	setc
  2648  0E3C  3000               	movlw	0
  2649  0E3D  1803               	skipnc
  2650  0E3E  3001               	movlw	1
  2651  0E3F  1283               	bcf	3,5	;RP0=0, select bank2
  2652  0E40  1703               	bsf	3,6	;RP1=1, select bank2
  2653  0E41  080C               	movf	12,w	;volatile
  2654  0E42  0008               	return
  2655  0E43                     __end_of_eeprom_read:	
  2656                           
  2657                           	psect	text9
  2658  0F42                     __ptext9:	
  2659 ;; *************** function _rTrim *****************
  2660 ;; Defined at:
  2661 ;;		line 122 in file "main.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;  str             1    wreg     PTR unsigned char 
  2664 ;;		 -> message(80), 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  str             1   10[BANK0 ] PTR unsigned char 
  2667 ;;		 -> message(80), 
  2668 ;;  i               2    8[BANK0 ] int 
  2669 ;;  index           2    6[BANK0 ] int 
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  1    wreg      void 
  2672 ;; Registers used:
  2673 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2679 ;;      Params:         0       0       0       0       0
  2680 ;;      Locals:         0       5       0       0       0
  2681 ;;      Temps:          0       1       0       0       0
  2682 ;;      Totals:         0       6       0       0       0
  2683 ;;Total ram usage:        6 bytes
  2684 ;; Hardware stack levels used:    1
  2685 ;; Hardware stack levels required when called:    4
  2686 ;; This function calls:
  2687 ;;		Nothing
  2688 ;; This function is called by:
  2689 ;;		_main
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           
  2694                           ;psect for function _rTrim
  2695  0F42                     _rTrim:	
  2696                           
  2697                           ;incstack = 0
  2698                           ; Regs used in _rTrim: [wreg-fsr0h+status,2+status,0]
  2699                           ;rTrim@str stored from wreg
  2700  0F42  1283               	bcf	3,5	;RP0=0, select bank0
  2701  0F43  1303               	bcf	3,6	;RP1=0, select bank0
  2702  0F44  00AA               	movwf	rTrim@str
  2703                           
  2704                           ;main.c: 124: int index, i;
  2705                           ;main.c: 127: i = 0;
  2706  0F45  01A8               	clrf	rTrim@i
  2707  0F46  01A9               	clrf	rTrim@i+1
  2708  0F47                     l1579:	
  2709                           ;main.c: 128: while(str[i] != '\0')
  2710                           
  2711  0F47  0828               	movf	rTrim@i,w
  2712  0F48  072A               	addwf	rTrim@str,w
  2713  0F49  00A5               	movwf	??_rTrim
  2714  0F4A  0825               	movf	??_rTrim,w
  2715  0F4B  0084               	movwf	4
  2716  0F4C  1383               	bcf	3,7	;select IRP bank0
  2717  0F4D  0800               	movf	0,w
  2718  0F4E  1903               	btfsc	3,2
  2719  0F4F  2F77               	goto	l1581
  2720                           
  2721                           ;main.c: 129: {
  2722                           ;main.c: 130: if(str[i] != ' ' && str[i] != '\t' && str[i] != '\n')
  2723  0F50  0828               	movf	rTrim@i,w
  2724  0F51  072A               	addwf	rTrim@str,w
  2725  0F52  00A5               	movwf	??_rTrim
  2726  0F53  0825               	movf	??_rTrim,w
  2727  0F54  0084               	movwf	4
  2728  0F55  3020               	movlw	32
  2729  0F56  1383               	bcf	3,7	;select IRP bank0
  2730  0F57  0600               	xorwf	0,w
  2731  0F58  1903               	btfsc	3,2
  2732  0F59  2F70               	goto	l81
  2733  0F5A  0828               	movf	rTrim@i,w
  2734  0F5B  072A               	addwf	rTrim@str,w
  2735  0F5C  00A5               	movwf	??_rTrim
  2736  0F5D  0825               	movf	??_rTrim,w
  2737  0F5E  0084               	movwf	4
  2738  0F5F  3009               	movlw	9
  2739  0F60  0600               	xorwf	0,w
  2740  0F61  1903               	btfsc	3,2
  2741  0F62  2F70               	goto	l81
  2742  0F63  0828               	movf	rTrim@i,w
  2743  0F64  072A               	addwf	rTrim@str,w
  2744  0F65  00A5               	movwf	??_rTrim
  2745  0F66  0825               	movf	??_rTrim,w
  2746  0F67  0084               	movwf	4
  2747  0F68  300A               	movlw	10
  2748  0F69  0600               	xorwf	0,w
  2749  0F6A  1903               	btfsc	3,2
  2750  0F6B  2F70               	goto	l81
  2751                           
  2752                           ;main.c: 131: {
  2753                           ;main.c: 132: index = i;
  2754  0F6C  0829               	movf	rTrim@i+1,w
  2755  0F6D  00A7               	movwf	rTrim@index+1
  2756  0F6E  0828               	movf	rTrim@i,w
  2757  0F6F  00A6               	movwf	rTrim@index
  2758  0F70                     l81:	
  2759                           
  2760                           ;main.c: 133: }
  2761                           ;main.c: 135: i++;
  2762  0F70  3001               	movlw	1
  2763  0F71  07A8               	addwf	rTrim@i,f
  2764  0F72  1803               	skipnc
  2765  0F73  0AA9               	incf	rTrim@i+1,f
  2766  0F74  3000               	movlw	0
  2767  0F75  07A9               	addwf	rTrim@i+1,f
  2768  0F76  2F47               	goto	l1579
  2769  0F77                     l1581:	
  2770                           
  2771                           ;main.c: 136: }
  2772                           ;main.c: 142: str[index + 1] = '\0';
  2773  0F77  0826               	movf	rTrim@index,w
  2774  0F78  3E01               	addlw	1
  2775  0F79  072A               	addwf	rTrim@str,w
  2776  0F7A  00A5               	movwf	??_rTrim
  2777  0F7B  0825               	movf	??_rTrim,w
  2778  0F7C  0084               	movwf	4
  2779  0F7D  0180               	clrf	0
  2780  0F7E  0008               	return
  2781  0F7F                     __end_of_rTrim:	
  2782                           
  2783                           	psect	text10
  2784  0E43                     __ptext10:	
  2785 ;; *************** function _left_rotate *****************
  2786 ;; Defined at:
  2787 ;;		line 275 in file "main.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;  arr             2   21[BANK0 ] PTR unsigned char 
  2790 ;;		 -> greeting_message(35), buffer(7), message(80), 
  2791 ;;  d               2   23[BANK0 ] int 
  2792 ;;  n               2   25[BANK0 ] int 
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;  k               2   28[BANK0 ] int 
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  1    wreg      void 
  2797 ;; Registers used:
  2798 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2804 ;;      Params:         0       6       0       0       0
  2805 ;;      Locals:         0       2       0       0       0
  2806 ;;      Temps:          0       1       0       0       0
  2807 ;;      Totals:         0       9       0       0       0
  2808 ;;Total ram usage:        9 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; Hardware stack levels required when called:    5
  2811 ;; This function calls:
  2812 ;;		_left_rotate_by_one
  2813 ;; This function is called by:
  2814 ;;		_main
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           
  2819                           ;psect for function _left_rotate
  2820  0E43                     _left_rotate:	
  2821                           
  2822                           ;main.c: 277: int k;
  2823                           ;main.c: 278: for (k = 0; k < d; k++)
  2824                           
  2825                           ;incstack = 0
  2826                           ; Regs used in _left_rotate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2827  0E43  1283               	bcf	3,5	;RP0=0, select bank0
  2828  0E44  1303               	bcf	3,6	;RP1=0, select bank0
  2829  0E45  01BC               	clrf	left_rotate@k
  2830  0E46  01BD               	clrf	left_rotate@k+1
  2831  0E47                     l1681:	
  2832  0E47  083D               	movf	left_rotate@k+1,w
  2833  0E48  3A80               	xorlw	128
  2834  0E49  00BB               	movwf	??_left_rotate
  2835  0E4A  0838               	movf	left_rotate@d+1,w
  2836  0E4B  3A80               	xorlw	128
  2837  0E4C  023B               	subwf	??_left_rotate,w
  2838  0E4D  1D03               	skipz
  2839  0E4E  2E51               	goto	u1545
  2840  0E4F  0837               	movf	left_rotate@d,w
  2841  0E50  023C               	subwf	left_rotate@k,w
  2842  0E51                     u1545:	
  2843  0E51  1803               	btfsc	3,0
  2844  0E52  0008               	return
  2845                           
  2846                           ;main.c: 279: left_rotate_by_one(arr, n);
  2847  0E53  1283               	bcf	3,5	;RP0=0, select bank0
  2848  0E54  1303               	bcf	3,6	;RP1=0, select bank0
  2849  0E55  0835               	movf	left_rotate@arr,w
  2850  0E56  00A5               	movwf	left_rotate_by_one@arr
  2851  0E57  0836               	movf	left_rotate@arr+1,w
  2852  0E58  00A6               	movwf	left_rotate_by_one@arr+1
  2853  0E59  083A               	movf	left_rotate@n+1,w
  2854  0E5A  00A8               	movwf	left_rotate_by_one@n+1
  2855  0E5B  0839               	movf	left_rotate@n,w
  2856  0E5C  00A7               	movwf	left_rotate_by_one@n
  2857  0E5D  120A  118A  2686  120A  158A  	fcall	_left_rotate_by_one
  2858  0E62  3001               	movlw	1
  2859  0E63  1283               	bcf	3,5	;RP0=0, select bank0
  2860  0E64  1303               	bcf	3,6	;RP1=0, select bank0
  2861  0E65  07BC               	addwf	left_rotate@k,f
  2862  0E66  1803               	skipnc
  2863  0E67  0ABD               	incf	left_rotate@k+1,f
  2864  0E68  3000               	movlw	0
  2865  0E69  07BD               	addwf	left_rotate@k+1,f
  2866  0E6A  2E47               	goto	l1681
  2867  0E6B                     __end_of_left_rotate:	
  2868                           
  2869                           	psect	text11
  2870  0686                     __ptext11:	
  2871 ;; *************** function _left_rotate_by_one *****************
  2872 ;; Defined at:
  2873 ;;		line 265 in file "main.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;  arr             2    5[BANK0 ] PTR unsigned char 
  2876 ;;		 -> greeting_message(35), buffer(7), message(80), 
  2877 ;;  n               2    7[BANK0 ] int 
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;  j               2   19[BANK0 ] int 
  2880 ;;  temp            2   17[BANK0 ] int 
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2890 ;;      Params:         0       4       0       0       0
  2891 ;;      Locals:         0       4       0       0       0
  2892 ;;      Temps:          0       8       0       0       0
  2893 ;;      Totals:         0      16       0       0       0
  2894 ;;Total ram usage:       16 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    4
  2897 ;; This function calls:
  2898 ;;		Nothing
  2899 ;; This function is called by:
  2900 ;;		_left_rotate
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           
  2905                           ;psect for function _left_rotate_by_one
  2906  0686                     _left_rotate_by_one:	
  2907                           
  2908                           ;main.c: 267: int j, temp;
  2909                           ;main.c: 268: temp = arr[0];
  2910                           
  2911                           ;incstack = 0
  2912                           ; Regs used in _left_rotate_by_one: [wreg-fsr0h+status,2+status,0]
  2913  0686  1283               	bcf	3,5	;RP0=0, select bank0
  2914  0687  1303               	bcf	3,6	;RP1=0, select bank0
  2915  0688  0825               	movf	left_rotate_by_one@arr,w
  2916  0689  0084               	movwf	4
  2917  068A  1783               	bsf	3,7
  2918  068B  1C26               	btfss	left_rotate_by_one@arr+1,0
  2919  068C  1383               	bcf	3,7
  2920  068D  0800               	movf	0,w
  2921  068E  00A9               	movwf	??_left_rotate_by_one
  2922  068F  01AA               	clrf	??_left_rotate_by_one+1
  2923  0690  0829               	movf	??_left_rotate_by_one,w
  2924  0691  00B1               	movwf	left_rotate_by_one@temp
  2925  0692  082A               	movf	??_left_rotate_by_one+1,w
  2926  0693  00B2               	movwf	left_rotate_by_one@temp+1
  2927                           
  2928                           ;main.c: 269: for (j = 0; j < n - 1; j++)
  2929  0694  01B3               	clrf	left_rotate_by_one@j
  2930  0695  01B4               	clrf	left_rotate_by_one@j+1
  2931  0696                     l1549:	
  2932  0696  0827               	movf	left_rotate_by_one@n,w
  2933  0697  3EFF               	addlw	255
  2934  0698  00A9               	movwf	??_left_rotate_by_one
  2935  0699  0828               	movf	left_rotate_by_one@n+1,w
  2936  069A  1803               	skipnc
  2937  069B  3E01               	addlw	1
  2938  069C  3EFF               	addlw	255
  2939  069D  00AA               	movwf	??_left_rotate_by_one+1
  2940  069E  0834               	movf	left_rotate_by_one@j+1,w
  2941  069F  3A80               	xorlw	128
  2942  06A0  00AB               	movwf	??_left_rotate_by_one+2
  2943  06A1  082A               	movf	??_left_rotate_by_one+1,w
  2944  06A2  3A80               	xorlw	128
  2945  06A3  022B               	subwf	??_left_rotate_by_one+2,w
  2946  06A4  1D03               	skipz
  2947  06A5  2EA8               	goto	u1435
  2948  06A6  0829               	movf	??_left_rotate_by_one,w
  2949  06A7  0233               	subwf	left_rotate_by_one@j,w
  2950  06A8                     u1435:	
  2951  06A8  1803               	btfsc	3,0
  2952  06A9  2EDE               	goto	l1551
  2953                           
  2954                           ;main.c: 270: arr[j] = arr[j + 1];
  2955  06AA  3001               	movlw	1
  2956  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  2957  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  2958  06AD  0733               	addwf	left_rotate_by_one@j,w
  2959  06AE  00A9               	movwf	??_left_rotate_by_one
  2960  06AF  0829               	movf	??_left_rotate_by_one,w
  2961  06B0  0725               	addwf	left_rotate_by_one@arr,w
  2962  06B1  00AB               	movwf	??_left_rotate_by_one+2
  2963  06B2  0826               	movf	left_rotate_by_one@arr+1,w
  2964  06B3  00AA               	movwf	??_left_rotate_by_one+1
  2965  06B4  1803               	skipnc
  2966  06B5  0AAA               	incf	??_left_rotate_by_one+1,f
  2967  06B6  1BA9               	btfsc	??_left_rotate_by_one,7
  2968  06B7  03AA               	decf	??_left_rotate_by_one+1,f
  2969  06B8  1283               	bcf	3,5	;RP0=0, select bank0
  2970  06B9  1303               	bcf	3,6	;RP1=0, select bank0
  2971  06BA  082A               	movf	??_left_rotate_by_one+1,w
  2972  06BB  00AC               	movwf	??_left_rotate_by_one+3
  2973  06BC  082B               	movf	??_left_rotate_by_one+2,w
  2974  06BD  0084               	movwf	4
  2975  06BE  1783               	bsf	3,7
  2976  06BF  1C2C               	btfss	??_left_rotate_by_one+3,0
  2977  06C0  1383               	bcf	3,7
  2978  06C1  0800               	movf	0,w
  2979  06C2  00AD               	movwf	??_left_rotate_by_one+4
  2980  06C3  0833               	movf	left_rotate_by_one@j,w
  2981  06C4  0725               	addwf	left_rotate_by_one@arr,w
  2982  06C5  00AF               	movwf	??_left_rotate_by_one+6
  2983  06C6  0826               	movf	left_rotate_by_one@arr+1,w
  2984  06C7  00AE               	movwf	??_left_rotate_by_one+5
  2985  06C8  1803               	skipnc
  2986  06C9  0AAE               	incf	??_left_rotate_by_one+5,f
  2987  06CA  1BB3               	btfsc	left_rotate_by_one@j,7
  2988  06CB  03AE               	decf	??_left_rotate_by_one+5,f
  2989  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  2990  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  2991  06CE  082E               	movf	??_left_rotate_by_one+5,w
  2992  06CF  00B0               	movwf	??_left_rotate_by_one+7
  2993  06D0  082F               	movf	??_left_rotate_by_one+6,w
  2994  06D1  0084               	movwf	4
  2995  06D2  1783               	bsf	3,7
  2996  06D3  1C30               	btfss	??_left_rotate_by_one+7,0
  2997  06D4  1383               	bcf	3,7
  2998  06D5  082D               	movf	??_left_rotate_by_one+4,w
  2999  06D6  0080               	movwf	0
  3000  06D7  3001               	movlw	1
  3001  06D8  07B3               	addwf	left_rotate_by_one@j,f
  3002  06D9  1803               	skipnc
  3003  06DA  0AB4               	incf	left_rotate_by_one@j+1,f
  3004  06DB  3000               	movlw	0
  3005  06DC  07B4               	addwf	left_rotate_by_one@j+1,f
  3006  06DD  2E96               	goto	l1549
  3007  06DE                     l1551:	
  3008                           
  3009                           ;main.c: 271: arr[j] = temp;
  3010  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  3011  06DF  1303               	bcf	3,6	;RP1=0, select bank0
  3012  06E0  0831               	movf	left_rotate_by_one@temp,w
  3013  06E1  00A9               	movwf	??_left_rotate_by_one
  3014  06E2  0833               	movf	left_rotate_by_one@j,w
  3015  06E3  0725               	addwf	left_rotate_by_one@arr,w
  3016  06E4  00AB               	movwf	??_left_rotate_by_one+2
  3017  06E5  0826               	movf	left_rotate_by_one@arr+1,w
  3018  06E6  00AA               	movwf	??_left_rotate_by_one+1
  3019  06E7  1803               	skipnc
  3020  06E8  0AAA               	incf	??_left_rotate_by_one+1,f
  3021  06E9  1BB3               	btfsc	left_rotate_by_one@j,7
  3022  06EA  03AA               	decf	??_left_rotate_by_one+1,f
  3023  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  3024  06EC  1303               	bcf	3,6	;RP1=0, select bank0
  3025  06ED  082A               	movf	??_left_rotate_by_one+1,w
  3026  06EE  00AC               	movwf	??_left_rotate_by_one+3
  3027  06EF  082B               	movf	??_left_rotate_by_one+2,w
  3028  06F0  0084               	movwf	4
  3029  06F1  1783               	bsf	3,7
  3030  06F2  1C2C               	btfss	??_left_rotate_by_one+3,0
  3031  06F3  1383               	bcf	3,7
  3032  06F4  0829               	movf	??_left_rotate_by_one,w
  3033  06F5  0080               	movwf	0
  3034  06F6  0008               	return
  3035  06F7                     __end_of_left_rotate_by_one:	
  3036                           
  3037                           	psect	text12
  3038  0F07                     __ptext12:	
  3039 ;; *************** function _init *****************
  3040 ;; Defined at:
  3041 ;;		line 167 in file "main.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;		None
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;		None
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      void 
  3048 ;; Registers used:
  3049 ;;		wreg, status,2
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3055 ;;      Params:         0       0       0       0       0
  3056 ;;      Locals:         0       0       0       0       0
  3057 ;;      Temps:          0       0       0       0       0
  3058 ;;      Totals:         0       0       0       0       0
  3059 ;;Total ram usage:        0 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    4
  3062 ;; This function calls:
  3063 ;;		Nothing
  3064 ;; This function is called by:
  3065 ;;		_main
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           
  3070                           ;psect for function _init
  3071  0F07                     _init:	
  3072                           
  3073                           ;main.c: 169: ANSEL = 0x00;
  3074                           
  3075                           ;incstack = 0
  3076                           ; Regs used in _init: [wreg+status,2]
  3077  0F07  1683               	bsf	3,5	;RP0=1, select bank3
  3078  0F08  1703               	bsf	3,6	;RP1=1, select bank3
  3079  0F09  0188               	clrf	8	;volatile
  3080                           
  3081                           ;main.c: 170: ANSELH = 0x00;
  3082  0F0A  0189               	clrf	9	;volatile
  3083                           
  3084                           ;main.c: 171: TRISA = 0;
  3085  0F0B  1683               	bsf	3,5	;RP0=1, select bank1
  3086  0F0C  1303               	bcf	3,6	;RP1=0, select bank1
  3087  0F0D  0185               	clrf	5	;volatile
  3088                           
  3089                           ;main.c: 172: TRISC = 0;
  3090  0F0E  0187               	clrf	7	;volatile
  3091                           
  3092                           ;main.c: 173: PORTA = 0;
  3093  0F0F  1283               	bcf	3,5	;RP0=0, select bank0
  3094  0F10  1303               	bcf	3,6	;RP1=0, select bank0
  3095  0F11  0185               	clrf	5	;volatile
  3096                           
  3097                           ;main.c: 174: TRISB = 0b11110000;
  3098  0F12  30F0               	movlw	240
  3099  0F13  1683               	bsf	3,5	;RP0=1, select bank1
  3100  0F14  1303               	bcf	3,6	;RP1=0, select bank1
  3101  0F15  0086               	movwf	6	;volatile
  3102                           
  3103                           ;main.c: 178: PORTAbits.RA0 = 1;
  3104  0F16  1283               	bcf	3,5	;RP0=0, select bank0
  3105  0F17  1303               	bcf	3,6	;RP1=0, select bank0
  3106  0F18  1405               	bsf	5,0	;volatile
  3107                           
  3108                           ;main.c: 179: PORTAbits.RA1 = 1;
  3109  0F19  1485               	bsf	5,1	;volatile
  3110                           
  3111                           ;main.c: 180: PORTAbits.RA2 = 1;
  3112  0F1A  1505               	bsf	5,2	;volatile
  3113                           
  3114                           ;main.c: 181: PORTAbits.RA3 = 1;
  3115  0F1B  1585               	bsf	5,3	;volatile
  3116                           
  3117                           ;main.c: 182: PORTAbits.RA4 = 1;
  3118  0F1C  1605               	bsf	5,4	;volatile
  3119                           
  3120                           ;main.c: 183: PORTAbits.RA5 = 1;
  3121  0F1D  1685               	bsf	5,5	;volatile
  3122                           
  3123                           ;main.c: 184: PORTAbits.RA6 = 0;
  3124  0F1E  1305               	bcf	5,6	;volatile
  3125                           
  3126                           ;main.c: 186: T2CON = 0b00000000;
  3127  0F1F  0192               	clrf	18	;volatile
  3128                           
  3129                           ;main.c: 187: TMR2 = 0;
  3130  0F20  0191               	clrf	17	;volatile
  3131                           
  3132                           ;main.c: 188: PR2 = 250;
  3133  0F21  30FA               	movlw	250
  3134  0F22  1683               	bsf	3,5	;RP0=1, select bank1
  3135  0F23  1303               	bcf	3,6	;RP1=0, select bank1
  3136  0F24  0092               	movwf	18	;volatile
  3137                           
  3138                           ;main.c: 189: PIR1bits.TMR2IF = 0;
  3139  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  3140  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  3141  0F27  108C               	bcf	12,1	;volatile
  3142                           
  3143                           ;main.c: 194: TMR0 = 100;
  3144  0F28  3064               	movlw	100
  3145  0F29  0081               	movwf	1	;volatile
  3146                           
  3147                           ;main.c: 196: OPTION_REG = 0b00000011;
  3148  0F2A  3003               	movlw	3
  3149  0F2B  1683               	bsf	3,5	;RP0=1, select bank1
  3150  0F2C  1303               	bcf	3,6	;RP1=0, select bank1
  3151  0F2D  0081               	movwf	1	;volatile
  3152                           
  3153                           ;main.c: 198: PORTB = 0xF0;
  3154  0F2E  30F0               	movlw	240
  3155  0F2F  1283               	bcf	3,5	;RP0=0, select bank0
  3156  0F30  1303               	bcf	3,6	;RP1=0, select bank0
  3157  0F31  0086               	movwf	6	;volatile
  3158                           
  3159                           ;main.c: 203: INTCONbits.RBIF = 0;
  3160  0F32  100B               	bcf	11,0	;volatile
  3161                           
  3162                           ;main.c: 204: INTCONbits.T0IE = 1;
  3163  0F33  168B               	bsf	11,5	;volatile
  3164                           
  3165                           ;main.c: 205: INTCONbits.RBIE = 1;
  3166  0F34  158B               	bsf	11,3	;volatile
  3167                           
  3168                           ;main.c: 206: INTCONbits.GIE = 1;
  3169  0F35  178B               	bsf	11,7	;volatile
  3170                           
  3171                           ;main.c: 207: IOCB = 0b11111111;
  3172  0F36  30FF               	movlw	255
  3173  0F37  1683               	bsf	3,5	;RP0=1, select bank1
  3174  0F38  1303               	bcf	3,6	;RP1=0, select bank1
  3175  0F39  0096               	movwf	22	;volatile
  3176                           
  3177                           ;main.c: 208: WPUB = 0b11110000;
  3178  0F3A  30F0               	movlw	240
  3179  0F3B  0095               	movwf	21	;volatile
  3180                           
  3181                           ;main.c: 209: PORTCbits.RC1 = 0;
  3182  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  3183  0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  3184  0F3E  1087               	bcf	7,1	;volatile
  3185                           
  3186                           ;main.c: 210: PORTCbits.RC2 = 0;
  3187  0F3F  1107               	bcf	7,2	;volatile
  3188                           
  3189                           ;main.c: 211: PORTCbits.RC0 = 0;
  3190  0F40  1007               	bcf	7,0	;volatile
  3191  0F41  0008               	return
  3192  0F42                     __end_of_init:	
  3193                           
  3194                           	psect	text13
  3195  0FBE                     __ptext13:	
  3196 ;; *************** function _control_speed *****************
  3197 ;; Defined at:
  3198 ;;		line 306 in file "main.c"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;		None
  3201 ;; Auto vars:     Size  Location     Type
  3202 ;;		None
  3203 ;; Return value:  Size  Location     Type
  3204 ;;                  1    wreg      void 
  3205 ;; Registers used:
  3206 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3207 ;; Tracked objects:
  3208 ;;		On entry : 0/0
  3209 ;;		On exit  : 0/0
  3210 ;;		Unchanged: 0/0
  3211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3212 ;;      Params:         0       0       0       0       0
  3213 ;;      Locals:         0       0       0       0       0
  3214 ;;      Temps:          0       0       0       0       0
  3215 ;;      Totals:         0       0       0       0       0
  3216 ;;Total ram usage:        0 bytes
  3217 ;; Hardware stack levels used:    1
  3218 ;; Hardware stack levels required when called:    5
  3219 ;; This function calls:
  3220 ;;		_delay
  3221 ;; This function is called by:
  3222 ;;		_main
  3223 ;; This function uses a non-reentrant model
  3224 ;;
  3225                           
  3226                           
  3227                           ;psect for function _control_speed
  3228  0FBE                     _control_speed:	
  3229                           
  3230                           ;main.c: 308: if (button_pressed == HASH)
  3231                           
  3232                           ;incstack = 0
  3233                           ; Regs used in _control_speed: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3234  0FBE  3007               	movlw	7
  3235  0FBF  1283               	bcf	3,5	;RP0=0, select bank0
  3236  0FC0  1303               	bcf	3,6	;RP1=0, select bank0
  3237  0FC1  0655               	xorwf	_button_pressed,w
  3238  0FC2  1D03               	btfss	3,2
  3239  0FC3  2FDE               	goto	l1695
  3240                           
  3241                           ;main.c: 309: {
  3242                           ;main.c: 310: speed -= 100;
  3243  0FC4  309C               	movlw	156
  3244  0FC5  07D3               	addwf	_speed,f
  3245  0FC6  1803               	skipnc
  3246  0FC7  0AD4               	incf	_speed+1,f
  3247  0FC8  30FF               	movlw	255
  3248  0FC9  07D4               	addwf	_speed+1,f
  3249                           
  3250                           ;main.c: 311: if (speed < 200) speed = 200;
  3251  0FCA  0854               	movf	_speed+1,w
  3252  0FCB  3A80               	xorlw	128
  3253  0FCC  00FF               	movwf	127
  3254  0FCD  3080               	movlw	128
  3255  0FCE  027F               	subwf	127,w
  3256  0FCF  1D03               	skipz
  3257  0FD0  2FD3               	goto	u1565
  3258  0FD1  30C8               	movlw	200
  3259  0FD2  0253               	subwf	_speed,w
  3260  0FD3                     u1565:	
  3261  0FD3  1803               	skipnc
  3262  0FD4  2FDB               	goto	l1693
  3263  0FD5  30C8               	movlw	200
  3264  0FD6  1283               	bcf	3,5	;RP0=0, select bank0
  3265  0FD7  1303               	bcf	3,6	;RP1=0, select bank0
  3266  0FD8  00D3               	movwf	_speed
  3267  0FD9  3000               	movlw	0
  3268  0FDA  00D4               	movwf	_speed+1
  3269  0FDB                     l1693:	
  3270                           
  3271                           ;main.c: 312: button_pressed = DEFAULT;
  3272  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
  3273  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
  3274  0FDD  01D5               	clrf	_button_pressed
  3275  0FDE                     l1695:	
  3276                           
  3277                           ;main.c: 313: }
  3278                           ;main.c: 315: if (button_pressed == STAR)
  3279  0FDE  3008               	movlw	8
  3280  0FDF  0655               	xorwf	_button_pressed,w
  3281  0FE0  1D03               	btfss	3,2
  3282  0FE1  2FFC               	goto	l1705
  3283                           
  3284                           ;main.c: 316: {
  3285                           ;main.c: 317: speed += 100;
  3286  0FE2  3064               	movlw	100
  3287  0FE3  07D3               	addwf	_speed,f
  3288  0FE4  1803               	skipnc
  3289  0FE5  0AD4               	incf	_speed+1,f
  3290  0FE6  3000               	movlw	0
  3291  0FE7  07D4               	addwf	_speed+1,f
  3292                           
  3293                           ;main.c: 318: if (speed > 1600) speed = 1600;
  3294  0FE8  0854               	movf	_speed+1,w
  3295  0FE9  3A80               	xorlw	128
  3296  0FEA  00FF               	movwf	127
  3297  0FEB  3086               	movlw	134
  3298  0FEC  027F               	subwf	127,w
  3299  0FED  1D03               	skipz
  3300  0FEE  2FF1               	goto	u1585
  3301  0FEF  3041               	movlw	65
  3302  0FF0  0253               	subwf	_speed,w
  3303  0FF1                     u1585:	
  3304  0FF1  1C03               	skipc
  3305  0FF2  2FF9               	goto	l1703
  3306  0FF3  3040               	movlw	64
  3307  0FF4  1283               	bcf	3,5	;RP0=0, select bank0
  3308  0FF5  1303               	bcf	3,6	;RP1=0, select bank0
  3309  0FF6  00D3               	movwf	_speed
  3310  0FF7  3006               	movlw	6
  3311  0FF8  00D4               	movwf	_speed+1
  3312  0FF9                     l1703:	
  3313                           
  3314                           ;main.c: 319: button_pressed = DEFAULT;
  3315  0FF9  1283               	bcf	3,5	;RP0=0, select bank0
  3316  0FFA  1303               	bcf	3,6	;RP1=0, select bank0
  3317  0FFB  01D5               	clrf	_button_pressed
  3318  0FFC                     l1705:	
  3319                           
  3320                           ;main.c: 320: }
  3321                           ;main.c: 321: delay();
  3322  0FFC  120A  158A  25B9   	fcall	_delay
  3323  0FFF  0008               	return
  3324  1000                     __end_of_control_speed:	
  3325                           
  3326                           	psect	text14
  3327  0DB9                     __ptext14:	
  3328 ;; *************** function _delay *****************
  3329 ;; Defined at:
  3330 ;;		line 214 in file "main.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;		None
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  i               2    6[BANK0 ] int 
  3335 ;; Return value:  Size  Location     Type
  3336 ;;                  1    wreg      void 
  3337 ;; Registers used:
  3338 ;;		wreg, status,2
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3344 ;;      Params:         0       0       0       0       0
  3345 ;;      Locals:         0       2       0       0       0
  3346 ;;      Temps:          0       1       0       0       0
  3347 ;;      Totals:         0       3       0       0       0
  3348 ;;Total ram usage:        3 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; Hardware stack levels required when called:    4
  3351 ;; This function calls:
  3352 ;;		Nothing
  3353 ;; This function is called by:
  3354 ;;		_save_in_eeprom
  3355 ;;		_control_speed
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359                           
  3360                           ;psect for function _delay
  3361  0DB9                     _delay:	
  3362                           
  3363                           ;main.c: 216: for (int i = 0; i < speed; i++)
  3364                           
  3365                           ;incstack = 0
  3366                           ; Regs used in _delay: [wreg+status,2]
  3367  0DB9  1283               	bcf	3,5	;RP0=0, select bank0
  3368  0DBA  1303               	bcf	3,6	;RP1=0, select bank0
  3369  0DBB  01A6               	clrf	delay@i
  3370  0DBC  01A7               	clrf	delay@i+1
  3371  0DBD                     l97:	
  3372  0DBD  0827               	movf	delay@i+1,w
  3373  0DBE  3A80               	xorlw	128
  3374  0DBF  00A5               	movwf	??_delay
  3375  0DC0  0854               	movf	_speed+1,w
  3376  0DC1  3A80               	xorlw	128
  3377  0DC2  0225               	subwf	??_delay,w
  3378  0DC3  1D03               	skipz
  3379  0DC4  2DC7               	goto	u1365
  3380  0DC5  0853               	movf	_speed,w
  3381  0DC6  0226               	subwf	delay@i,w
  3382  0DC7                     u1365:	
  3383  0DC7  1803               	btfsc	3,0
  3384  0DC8  0008               	return
  3385                           
  3386                           ;main.c: 217: {
  3387                           ;main.c: 218: _delay((unsigned long)((100)*(8000000/4000000.0)));
  3388  0DC9  3041               	movlw	65
  3389  0DCA  1283               	bcf	3,5	;RP0=0, select bank0
  3390  0DCB  1303               	bcf	3,6	;RP1=0, select bank0
  3391  0DCC  00A5               	movwf	??_delay
  3392  0DCD                     u2657:	
  3393  0DCD  0BA5               	decfsz	??_delay,f
  3394  0DCE  2DCD               	goto	u2657
  3395  0DCF  2DD0               	nop2
  3396  0DD0  3001               	movlw	1
  3397  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  3398  0DD2  1303               	bcf	3,6	;RP1=0, select bank0
  3399  0DD3  07A6               	addwf	delay@i,f
  3400  0DD4  1803               	skipnc
  3401  0DD5  0AA7               	incf	delay@i+1,f
  3402  0DD6  3000               	movlw	0
  3403  0DD7  07A7               	addwf	delay@i+1,f
  3404  0DD8  2DBD               	goto	l97
  3405  0DD9                     __end_of_delay:	
  3406                           
  3407                           	psect	text15
  3408  0E6B                     __ptext15:	
  3409 ;; *************** function _choose_digit_display *****************
  3410 ;; Defined at:
  3411 ;;		line 326 in file "main.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;  n               1    wreg     unsigned char 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  n               1    6[BANK0 ] unsigned char 
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      void 
  3418 ;; Registers used:
  3419 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3425 ;;      Params:         0       0       0       0       0
  3426 ;;      Locals:         0       1       0       0       0
  3427 ;;      Temps:          0       1       0       0       0
  3428 ;;      Totals:         0       2       0       0       0
  3429 ;;Total ram usage:        2 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; Hardware stack levels required when called:    4
  3432 ;; This function calls:
  3433 ;;		Nothing
  3434 ;; This function is called by:
  3435 ;;		_main
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           
  3440                           ;psect for function _choose_digit_display
  3441  0E6B                     _choose_digit_display:	
  3442                           
  3443                           ;incstack = 0
  3444                           ; Regs used in _choose_digit_display: [wreg-fsr0h+status,2+status,0]
  3445                           ;choose_digit_display@n stored from wreg
  3446  0E6B  1283               	bcf	3,5	;RP0=0, select bank0
  3447  0E6C  1303               	bcf	3,6	;RP1=0, select bank0
  3448  0E6D  00A6               	movwf	choose_digit_display@n
  3449                           
  3450                           ;main.c: 328: button_pressed = DEFAULT;
  3451  0E6E  01D5               	clrf	_button_pressed
  3452                           
  3453                           ;main.c: 330: if (character == '_')
  3454  0E6F  305F               	movlw	95
  3455  0E70  0656               	xorwf	_character,w
  3456  0E71  1D03               	btfss	3,2
  3457  0E72  2E7D               	goto	l1713
  3458                           
  3459                           ;main.c: 331: {
  3460                           ;main.c: 332: buffer[n] = ' ';
  3461  0E73  3020               	movlw	32
  3462  0E74  00A5               	movwf	??_choose_digit_display
  3463  0E75  0826               	movf	choose_digit_display@n,w
  3464  0E76  3E57               	addlw	(low (_buffer| 0))& (0+255)
  3465  0E77  0084               	movwf	4
  3466  0E78  0825               	movf	??_choose_digit_display,w
  3467  0E79  1383               	bcf	3,7	;select IRP bank0
  3468  0E7A  0080               	movwf	0
  3469                           
  3470                           ;main.c: 333: message[index] = ' ';
  3471  0E7B  3020               	movlw	32
  3472  0E7C  2E86               	goto	L1
  3473  0E7D                     l1713:	
  3474                           ;main.c: 334: }
  3475                           
  3476                           
  3477                           ;main.c: 335: else
  3478                           ;main.c: 336: {
  3479                           ;main.c: 337: buffer[n] = character;
  3480  0E7D  0856               	movf	_character,w
  3481  0E7E  00A5               	movwf	??_choose_digit_display
  3482  0E7F  0826               	movf	choose_digit_display@n,w
  3483  0E80  3E57               	addlw	(low (_buffer| 0))& (0+255)
  3484  0E81  0084               	movwf	4
  3485  0E82  0825               	movf	??_choose_digit_display,w
  3486  0E83  1383               	bcf	3,7	;select IRP bank0
  3487  0E84  0080               	movwf	0
  3488                           
  3489                           ;main.c: 338: message[index] = character;
  3490  0E85  0856               	movf	_character,w
  3491  0E86                     L1:	
  3492  0E86  00A5               	movwf	??_choose_digit_display
  3493  0E87  085E               	movf	_index,w
  3494  0E88  3EA0               	addlw	(low (_message| 0))& (0+255)
  3495  0E89  0084               	movwf	4
  3496  0E8A  0825               	movf	??_choose_digit_display,w
  3497  0E8B  0080               	movwf	0
  3498                           
  3499                           ;main.c: 339: }
  3500                           ;main.c: 340: character = '_';
  3501  0E8C  305F               	movlw	95
  3502  0E8D  00A5               	movwf	??_choose_digit_display
  3503  0E8E  0825               	movf	??_choose_digit_display,w
  3504  0E8F  00D6               	movwf	_character
  3505                           
  3506                           ;main.c: 341: cursor++;
  3507  0E90  3001               	movlw	1
  3508  0E91  00A5               	movwf	??_choose_digit_display
  3509  0E92  0825               	movf	??_choose_digit_display,w
  3510  0E93  07FD               	addwf	_cursor,f
  3511                           
  3512                           ;main.c: 342: index++;
  3513  0E94  3001               	movlw	1
  3514  0E95  07DE               	addwf	_index,f
  3515  0E96  1803               	skipnc
  3516  0E97  0ADF               	incf	_index+1,f
  3517  0E98  3000               	movlw	0
  3518  0E99  07DF               	addwf	_index+1,f
  3519  0E9A  0008               	return
  3520  0E9B                     __end_of_choose_digit_display:	
  3521                           
  3522                           	psect	text16
  3523  02D6                     __ptext16:	
  3524 ;; *************** function _isr *****************
  3525 ;; Defined at:
  3526 ;;		line 349 in file "main.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;		None
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;		None
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  1    wreg      void 
  3533 ;; Registers used:
  3534 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3540 ;;      Params:         0       0       0       0       0
  3541 ;;      Locals:         0       0       0       0       0
  3542 ;;      Temps:          0       5       0       0       0
  3543 ;;      Totals:         0       5       0       0       0
  3544 ;;Total ram usage:        5 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:    3
  3547 ;; This function calls:
  3548 ;;		_display
  3549 ;; This function is called by:
  3550 ;;		Interrupt level 1
  3551 ;; This function uses a non-reentrant model
  3552 ;;
  3553                           
  3554                           
  3555                           ;psect for function _isr
  3556  02D6                     _isr:	
  3557                           
  3558                           ;main.c: 351: if (INTCONbits.T0IF == 1)
  3559  02D6  1D0B               	btfss	11,2	;volatile
  3560  02D7  2B6A               	goto	i1l151
  3561                           
  3562                           ;main.c: 352: {
  3563                           ;main.c: 353: TMR0 = 100;
  3564  02D8  3064               	movlw	100
  3565  02D9  0081               	movwf	1	;volatile
  3566                           
  3567                           ;main.c: 354: INTCONbits.T0IF = 0;
  3568  02DA  110B               	bcf	11,2	;volatile
  3569                           
  3570                           ;main.c: 356: switch (display_flag)
  3571  02DB  2B56               	goto	i1l1827
  3572  02DC                     i1l153:	
  3573                           ;main.c: 357: {
  3574                           ;main.c: 358: case 0:
  3575                           
  3576                           
  3577                           ;main.c: 359: {
  3578                           ;main.c: 360: PORTAbits.RA5 = 1;
  3579  02DC  1685               	bsf	5,5	;volatile
  3580                           
  3581                           ;main.c: 361: if (cursor == 0) display(character);
  3582  02DD  087D               	movf	_cursor,w
  3583  02DE  1D03               	btfss	3,2
  3584  02DF  2AE2               	goto	i1l1769
  3585  02E0  0856               	movf	_character,w
  3586  02E1  2AE5               	goto	L5
  3587  02E2                     i1l1769:	
  3588                           
  3589                           ;main.c: 362: else display(buffer[0]);
  3590  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  3591  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  3592  02E4  0857               	movf	_buffer,w
  3593  02E5                     L5:	
  3594  02E5  120A  118A  27F3  120A  118A  	fcall	_display
  3595                           
  3596                           ;main.c: 363: PORTAbits.RA0 = 0;
  3597  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  3598  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  3599  02EC  1005               	bcf	5,0	;volatile
  3600                           
  3601                           ;main.c: 364: display_flag = 1;
  3602  02ED  01E0               	clrf	_display_flag
  3603  02EE  0AE0               	incf	_display_flag,f
  3604                           
  3605                           ;main.c: 365: break;
  3606  02EF  2B6A               	goto	i1l151
  3607  02F0                     i1l157:	
  3608                           ;main.c: 366: }
  3609                           ;main.c: 367: case 1:
  3610                           
  3611                           
  3612                           ;main.c: 368: {
  3613                           ;main.c: 369: PORTAbits.RA0 = 1;
  3614  02F0  1405               	bsf	5,0	;volatile
  3615                           
  3616                           ;main.c: 370: if (cursor == 1) display(character);
  3617  02F1  037D               	decf	_cursor,w
  3618  02F2  1D03               	btfss	3,2
  3619  02F3  2AF6               	goto	i1l1779
  3620  02F4  0856               	movf	_character,w
  3621  02F5  2AF9               	goto	L6
  3622  02F6                     i1l1779:	
  3623                           
  3624                           ;main.c: 371: else display(buffer[1]);
  3625  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  3626  02F7  1303               	bcf	3,6	;RP1=0, select bank0
  3627  02F8  0858               	movf	_buffer+1,w
  3628  02F9                     L6:	
  3629  02F9  120A  118A  27F3  120A  118A  	fcall	_display
  3630                           
  3631                           ;main.c: 372: PORTAbits.RA1 = 0;
  3632  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  3633  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  3634  0300  1085               	bcf	5,1	;volatile
  3635                           
  3636                           ;main.c: 373: display_flag = 2;
  3637  0301  3002               	movlw	2
  3638  0302  2B3E               	goto	L4
  3639  0303                     i1l160:	
  3640                           ;main.c: 375: }
  3641                           ;main.c: 376: case 2:
  3642                           
  3643                           ;main.c: 374: break;
  3644                           
  3645                           
  3646                           ;main.c: 377: {
  3647                           ;main.c: 378: PORTAbits.RA1 = 1;
  3648  0303  1485               	bsf	5,1	;volatile
  3649                           
  3650                           ;main.c: 379: if (cursor == 2) display(character);
  3651  0304  3002               	movlw	2
  3652  0305  067D               	xorwf	_cursor,w
  3653  0306  1D03               	btfss	3,2
  3654  0307  2B0A               	goto	i1l1789
  3655  0308  0856               	movf	_character,w
  3656  0309  2B0D               	goto	L7
  3657  030A                     i1l1789:	
  3658                           
  3659                           ;main.c: 380: else display(buffer[2]);
  3660  030A  1283               	bcf	3,5	;RP0=0, select bank0
  3661  030B  1303               	bcf	3,6	;RP1=0, select bank0
  3662  030C  0859               	movf	_buffer+2,w
  3663  030D                     L7:	
  3664  030D  120A  118A  27F3  120A  118A  	fcall	_display
  3665                           
  3666                           ;main.c: 381: PORTAbits.RA2 = 0;
  3667  0312  1283               	bcf	3,5	;RP0=0, select bank0
  3668  0313  1303               	bcf	3,6	;RP1=0, select bank0
  3669  0314  1105               	bcf	5,2	;volatile
  3670                           
  3671                           ;main.c: 382: display_flag = 3;
  3672  0315  3003               	movlw	3
  3673  0316  2B3E               	goto	L4
  3674  0317                     i1l163:	
  3675                           ;main.c: 384: }
  3676                           ;main.c: 385: case 3:
  3677                           
  3678                           ;main.c: 383: break;
  3679                           
  3680                           
  3681                           ;main.c: 386: {
  3682                           ;main.c: 387: PORTAbits.RA2 = 1;
  3683  0317  1505               	bsf	5,2	;volatile
  3684                           
  3685                           ;main.c: 388: if (cursor == 3) display(character);
  3686  0318  3003               	movlw	3
  3687  0319  067D               	xorwf	_cursor,w
  3688  031A  1D03               	btfss	3,2
  3689  031B  2B1E               	goto	i1l1799
  3690  031C  0856               	movf	_character,w
  3691  031D  2B21               	goto	L8
  3692  031E                     i1l1799:	
  3693                           
  3694                           ;main.c: 389: else display(buffer[3]);
  3695  031E  1283               	bcf	3,5	;RP0=0, select bank0
  3696  031F  1303               	bcf	3,6	;RP1=0, select bank0
  3697  0320  085A               	movf	_buffer+3,w
  3698  0321                     L8:	
  3699  0321  120A  118A  27F3  120A  118A  	fcall	_display
  3700                           
  3701                           ;main.c: 390: PORTAbits.RA3 = 0;
  3702  0326  1283               	bcf	3,5	;RP0=0, select bank0
  3703  0327  1303               	bcf	3,6	;RP1=0, select bank0
  3704  0328  1185               	bcf	5,3	;volatile
  3705                           
  3706                           ;main.c: 391: display_flag = 4;
  3707  0329  3004               	movlw	4
  3708  032A  2B3E               	goto	L4
  3709  032B                     i1l166:	
  3710                           ;main.c: 393: }
  3711                           ;main.c: 394: case 4:
  3712                           
  3713                           ;main.c: 392: break;
  3714                           
  3715                           
  3716                           ;main.c: 395: {
  3717                           ;main.c: 396: PORTAbits.RA3 = 1;
  3718  032B  1585               	bsf	5,3	;volatile
  3719                           
  3720                           ;main.c: 397: if (cursor == 4) display(character);
  3721  032C  3004               	movlw	4
  3722  032D  067D               	xorwf	_cursor,w
  3723  032E  1D03               	btfss	3,2
  3724  032F  2B32               	goto	i1l1809
  3725  0330  0856               	movf	_character,w
  3726  0331  2B35               	goto	L9
  3727  0332                     i1l1809:	
  3728                           
  3729                           ;main.c: 398: else display(buffer[4]);
  3730  0332  1283               	bcf	3,5	;RP0=0, select bank0
  3731  0333  1303               	bcf	3,6	;RP1=0, select bank0
  3732  0334  085B               	movf	_buffer+4,w
  3733  0335                     L9:	
  3734  0335  120A  118A  27F3  120A  118A  	fcall	_display
  3735                           
  3736                           ;main.c: 399: PORTAbits.RA4 = 0;
  3737  033A  1283               	bcf	3,5	;RP0=0, select bank0
  3738  033B  1303               	bcf	3,6	;RP1=0, select bank0
  3739  033C  1205               	bcf	5,4	;volatile
  3740                           
  3741                           ;main.c: 400: display_flag = 5;
  3742  033D  3005               	movlw	5
  3743  033E                     L4:	
  3744  033E  00A0               	movwf	??_isr
  3745  033F  0820               	movf	??_isr,w
  3746  0340  00E0               	movwf	_display_flag
  3747                           
  3748                           ;main.c: 401: break;
  3749  0341  2B6A               	goto	i1l151
  3750  0342                     i1l169:	
  3751                           ;main.c: 402: }
  3752                           ;main.c: 403: case 5:
  3753                           
  3754                           
  3755                           ;main.c: 404: {
  3756                           ;main.c: 405: PORTAbits.RA4 = 1;
  3757  0342  1605               	bsf	5,4	;volatile
  3758                           
  3759                           ;main.c: 406: if (cursor == 5) display(character);
  3760  0343  3005               	movlw	5
  3761  0344  067D               	xorwf	_cursor,w
  3762  0345  1D03               	btfss	3,2
  3763  0346  2B49               	goto	i1l1819
  3764  0347  0856               	movf	_character,w
  3765  0348  2B4C               	goto	L10
  3766  0349                     i1l1819:	
  3767                           
  3768                           ;main.c: 407: else display(buffer[5]);
  3769  0349  1283               	bcf	3,5	;RP0=0, select bank0
  3770  034A  1303               	bcf	3,6	;RP1=0, select bank0
  3771  034B  085C               	movf	_buffer+5,w
  3772  034C                     L10:	
  3773  034C  120A  118A  27F3  120A  118A  	fcall	_display
  3774                           
  3775                           ;main.c: 408: PORTAbits.RA5 = 0;
  3776  0351  1283               	bcf	3,5	;RP0=0, select bank0
  3777  0352  1303               	bcf	3,6	;RP1=0, select bank0
  3778  0353  1285               	bcf	5,5	;volatile
  3779                           
  3780                           ;main.c: 409: display_flag = 0;
  3781  0354  01E0               	clrf	_display_flag
  3782                           
  3783                           ;main.c: 411: }
  3784                           ;main.c: 413: }
  3785                           
  3786                           ;main.c: 410: break;
  3787  0355  2B6A               	goto	i1l151
  3788  0356                     i1l1827:	
  3789  0356  0860               	movf	_display_flag,w
  3790                           
  3791                           ; Switch size 1, requested type "space"
  3792                           ; Number of cases is 6, Range of values is 0 to 5
  3793                           ; switch strategies available:
  3794                           ; Name         Instructions Cycles
  3795                           ; simple_byte           19    10 (average)
  3796                           ; direct_byte           26     8 (fixed)
  3797                           ; jumptable            260     6 (fixed)
  3798                           ;	Chosen strategy is simple_byte
  3799  0357  3A00               	xorlw	0	; case 0
  3800  0358  1903               	skipnz
  3801  0359  2ADC               	goto	i1l153
  3802  035A  3A01               	xorlw	1	; case 1
  3803  035B  1903               	skipnz
  3804  035C  2AF0               	goto	i1l157
  3805  035D  3A03               	xorlw	3	; case 2
  3806  035E  1903               	skipnz
  3807  035F  2B03               	goto	i1l160
  3808  0360  3A01               	xorlw	1	; case 3
  3809  0361  1903               	skipnz
  3810  0362  2B17               	goto	i1l163
  3811  0363  3A07               	xorlw	7	; case 4
  3812  0364  1903               	skipnz
  3813  0365  2B2B               	goto	i1l166
  3814  0366  3A01               	xorlw	1	; case 5
  3815  0367  1903               	skipnz
  3816  0368  2B42               	goto	i1l169
  3817  0369  2B6A               	goto	i1l151
  3818  036A                     i1l151:	
  3819                           
  3820                           ;main.c: 415: }
  3821                           ;main.c: 418: if (INTCONbits.RBIF == 1)
  3822  036A  1C0B               	btfss	11,0	;volatile
  3823  036B  2D2D               	goto	i1l219
  3824                           
  3825                           ;main.c: 419: {
  3826                           ;main.c: 420: TMR2 = 0;
  3827  036C  0191               	clrf	17	;volatile
  3828                           
  3829                           ;main.c: 421: T2CONbits.TMR2ON = 1;
  3830  036D  1512               	bsf	18,2	;volatile
  3831                           
  3832                           ;main.c: 423: PORTAbits.RA6 = 1;
  3833  036E  1705               	bsf	5,6	;volatile
  3834                           
  3835                           ;main.c: 424: pressed_time++;
  3836  036F  3001               	movlw	1
  3837  0370  07FB               	addwf	_pressed_time,f
  3838  0371  1803               	skipnc
  3839  0372  0AFC               	incf	_pressed_time+1,f
  3840  0373  3000               	movlw	0
  3841  0374  07FC               	addwf	_pressed_time+1,f
  3842                           
  3843                           ;main.c: 425: if (pressed_time > 12500) pressed_time = 0;
  3844  0375  3030               	movlw	48
  3845  0376  027C               	subwf	_pressed_time+1,w
  3846  0377  30D5               	movlw	213
  3847  0378  1903               	skipnz
  3848  0379  027B               	subwf	_pressed_time,w
  3849  037A  1C03               	skipc
  3850  037B  2B7E               	goto	i1l1841
  3851  037C  01FB               	clrf	_pressed_time
  3852  037D  01FC               	clrf	_pressed_time+1
  3853  037E                     i1l1841:	
  3854                           
  3855                           ;main.c: 427: PORTB = 0b00001110;
  3856  037E  300E               	movlw	14
  3857  037F  0086               	movwf	6	;volatile
  3858                           
  3859                           ;main.c: 428: if (!PORTBbits.RB7)
  3860  0380  1B86               	btfsc	6,7	;volatile
  3861  0381  2B86               	goto	i1l1847
  3862                           
  3863                           ;main.c: 429: {
  3864                           ;main.c: 430: character = '1';
  3865  0382  3031               	movlw	49
  3866  0383  00A0               	movwf	??_isr
  3867  0384  0820               	movf	??_isr,w
  3868  0385  00D6               	movwf	_character
  3869  0386                     i1l1847:	
  3870                           
  3871                           ;main.c: 431: }
  3872                           ;main.c: 433: if (!PORTBbits.RB6)
  3873  0386  1B06               	btfsc	6,6	;volatile
  3874  0387  2BAD               	goto	i1l1857
  3875                           
  3876                           ;main.c: 434: {
  3877                           ;main.c: 435: character = '2';
  3878  0388  3032               	movlw	50
  3879  0389  00A0               	movwf	??_isr
  3880  038A  0820               	movf	??_isr,w
  3881  038B  00D6               	movwf	_character
  3882                           
  3883                           ;main.c: 436: if (pressed_time > 2500) character = 'A';
  3884  038C  3009               	movlw	9
  3885  038D  027C               	subwf	_pressed_time+1,w
  3886  038E  30C5               	movlw	197
  3887  038F  1903               	skipnz
  3888  0390  027B               	subwf	_pressed_time,w
  3889  0391  1C03               	skipc
  3890  0392  2B97               	goto	i1l176
  3891  0393  3041               	movlw	65
  3892  0394  00A0               	movwf	??_isr
  3893  0395  0820               	movf	??_isr,w
  3894  0396  00D6               	movwf	_character
  3895  0397                     i1l176:	
  3896                           
  3897                           ;main.c: 437: if (pressed_time > 5000) character = 'B';
  3898  0397  3013               	movlw	19
  3899  0398  027C               	subwf	_pressed_time+1,w
  3900  0399  3089               	movlw	137
  3901  039A  1903               	skipnz
  3902  039B  027B               	subwf	_pressed_time,w
  3903  039C  1C03               	skipc
  3904  039D  2BA2               	goto	i1l177
  3905  039E  3042               	movlw	66
  3906  039F  00A0               	movwf	??_isr
  3907  03A0  0820               	movf	??_isr,w
  3908  03A1  00D6               	movwf	_character
  3909  03A2                     i1l177:	
  3910                           
  3911                           ;main.c: 438: if (pressed_time > 7500) character = 'C';
  3912  03A2  301D               	movlw	29
  3913  03A3  027C               	subwf	_pressed_time+1,w
  3914  03A4  304D               	movlw	77
  3915  03A5  1903               	skipnz
  3916  03A6  027B               	subwf	_pressed_time,w
  3917  03A7  1C03               	skipc
  3918  03A8  2BAD               	goto	i1l1857
  3919  03A9  3043               	movlw	67
  3920  03AA  00A0               	movwf	??_isr
  3921  03AB  0820               	movf	??_isr,w
  3922  03AC  00D6               	movwf	_character
  3923  03AD                     i1l1857:	
  3924                           
  3925                           ;main.c: 439: }
  3926                           ;main.c: 440: if (!PORTBbits.RB5)
  3927  03AD  1A86               	btfsc	6,5	;volatile
  3928  03AE  2BD4               	goto	i1l1867
  3929                           
  3930                           ;main.c: 441: {
  3931                           ;main.c: 442: character = '3';
  3932  03AF  3033               	movlw	51
  3933  03B0  00A0               	movwf	??_isr
  3934  03B1  0820               	movf	??_isr,w
  3935  03B2  00D6               	movwf	_character
  3936                           
  3937                           ;main.c: 443: if (pressed_time > 2500) character = 'D';
  3938  03B3  3009               	movlw	9
  3939  03B4  027C               	subwf	_pressed_time+1,w
  3940  03B5  30C5               	movlw	197
  3941  03B6  1903               	skipnz
  3942  03B7  027B               	subwf	_pressed_time,w
  3943  03B8  1C03               	skipc
  3944  03B9  2BBE               	goto	i1l180
  3945  03BA  3044               	movlw	68
  3946  03BB  00A0               	movwf	??_isr
  3947  03BC  0820               	movf	??_isr,w
  3948  03BD  00D6               	movwf	_character
  3949  03BE                     i1l180:	
  3950                           
  3951                           ;main.c: 444: if (pressed_time > 5000) character = 'E';
  3952  03BE  3013               	movlw	19
  3953  03BF  027C               	subwf	_pressed_time+1,w
  3954  03C0  3089               	movlw	137
  3955  03C1  1903               	skipnz
  3956  03C2  027B               	subwf	_pressed_time,w
  3957  03C3  1C03               	skipc
  3958  03C4  2BC9               	goto	i1l181
  3959  03C5  3045               	movlw	69
  3960  03C6  00A0               	movwf	??_isr
  3961  03C7  0820               	movf	??_isr,w
  3962  03C8  00D6               	movwf	_character
  3963  03C9                     i1l181:	
  3964                           
  3965                           ;main.c: 445: if (pressed_time > 7500) character = 'F';
  3966  03C9  301D               	movlw	29
  3967  03CA  027C               	subwf	_pressed_time+1,w
  3968  03CB  304D               	movlw	77
  3969  03CC  1903               	skipnz
  3970  03CD  027B               	subwf	_pressed_time,w
  3971  03CE  1C03               	skipc
  3972  03CF  2BD4               	goto	i1l1867
  3973  03D0  3046               	movlw	70
  3974  03D1  00A0               	movwf	??_isr
  3975  03D2  0820               	movf	??_isr,w
  3976  03D3  00D6               	movwf	_character
  3977  03D4                     i1l1867:	
  3978                           
  3979                           ;main.c: 446: }
  3980                           ;main.c: 447: if (!PORTBbits.RB4)
  3981  03D4  1A06               	btfsc	6,4	;volatile
  3982  03D5  2BE5               	goto	i1l183
  3983                           
  3984                           ;main.c: 448: {
  3985                           ;main.c: 449: button_pressed = A;
  3986  03D6  3002               	movlw	2
  3987  03D7  00A0               	movwf	??_isr
  3988  03D8  0820               	movf	??_isr,w
  3989  03D9  00D5               	movwf	_button_pressed
  3990                           
  3991                           ;main.c: 450: if (pressed_time > 4000) button_pressed = A_LONG;
  3992  03DA  300F               	movlw	15
  3993  03DB  027C               	subwf	_pressed_time+1,w
  3994  03DC  30A1               	movlw	161
  3995  03DD  1903               	skipnz
  3996  03DE  027B               	subwf	_pressed_time,w
  3997  03DF  1C03               	skipc
  3998  03E0  2BE5               	goto	i1l183
  3999  03E1  3003               	movlw	3
  4000  03E2  00A0               	movwf	??_isr
  4001  03E3  0820               	movf	??_isr,w
  4002  03E4  00D5               	movwf	_button_pressed
  4003  03E5                     i1l183:	
  4004                           
  4005                           ;main.c: 451: }
  4006                           ;main.c: 454: PORTB = 0b00001101;
  4007  03E5  300D               	movlw	13
  4008  03E6  0086               	movwf	6	;volatile
  4009                           
  4010                           ;main.c: 455: if (!PORTBbits.RB7)
  4011  03E7  1B86               	btfsc	6,7	;volatile
  4012  03E8  2C0E               	goto	i1l1883
  4013                           
  4014                           ;main.c: 456: {
  4015                           ;main.c: 457: character = '4';
  4016  03E9  3034               	movlw	52
  4017  03EA  00A0               	movwf	??_isr
  4018  03EB  0820               	movf	??_isr,w
  4019  03EC  00D6               	movwf	_character
  4020                           
  4021                           ;main.c: 458: if (pressed_time > 2500) character = 'G';
  4022  03ED  3009               	movlw	9
  4023  03EE  027C               	subwf	_pressed_time+1,w
  4024  03EF  30C5               	movlw	197
  4025  03F0  1903               	skipnz
  4026  03F1  027B               	subwf	_pressed_time,w
  4027  03F2  1C03               	skipc
  4028  03F3  2BF8               	goto	i1l186
  4029  03F4  3047               	movlw	71
  4030  03F5  00A0               	movwf	??_isr
  4031  03F6  0820               	movf	??_isr,w
  4032  03F7  00D6               	movwf	_character
  4033  03F8                     i1l186:	
  4034                           
  4035                           ;main.c: 459: if (pressed_time > 5000) character = 'H';
  4036  03F8  3013               	movlw	19
  4037  03F9  027C               	subwf	_pressed_time+1,w
  4038  03FA  3089               	movlw	137
  4039  03FB  1903               	skipnz
  4040  03FC  027B               	subwf	_pressed_time,w
  4041  03FD  1C03               	skipc
  4042  03FE  2C03               	goto	i1l187
  4043  03FF  3048               	movlw	72
  4044  0400  00A0               	movwf	??_isr
  4045  0401  0820               	movf	??_isr,w
  4046  0402  00D6               	movwf	_character
  4047  0403                     i1l187:	
  4048                           
  4049                           ;main.c: 460: if (pressed_time > 7500) character = 'I';
  4050  0403  301D               	movlw	29
  4051  0404  027C               	subwf	_pressed_time+1,w
  4052  0405  304D               	movlw	77
  4053  0406  1903               	skipnz
  4054  0407  027B               	subwf	_pressed_time,w
  4055  0408  1C03               	skipc
  4056  0409  2C0E               	goto	i1l1883
  4057  040A  3049               	movlw	73
  4058  040B  00A0               	movwf	??_isr
  4059  040C  0820               	movf	??_isr,w
  4060  040D  00D6               	movwf	_character
  4061  040E                     i1l1883:	
  4062                           
  4063                           ;main.c: 461: }
  4064                           ;main.c: 462: if (!PORTBbits.RB6)
  4065  040E  1B06               	btfsc	6,6	;volatile
  4066  040F  2C35               	goto	i1l1893
  4067                           
  4068                           ;main.c: 463: {
  4069                           ;main.c: 464: character = '5';
  4070  0410  3035               	movlw	53
  4071  0411  00A0               	movwf	??_isr
  4072  0412  0820               	movf	??_isr,w
  4073  0413  00D6               	movwf	_character
  4074                           
  4075                           ;main.c: 465: if (pressed_time > 2500) character = 'J';
  4076  0414  3009               	movlw	9
  4077  0415  027C               	subwf	_pressed_time+1,w
  4078  0416  30C5               	movlw	197
  4079  0417  1903               	skipnz
  4080  0418  027B               	subwf	_pressed_time,w
  4081  0419  1C03               	skipc
  4082  041A  2C1F               	goto	i1l190
  4083  041B  304A               	movlw	74
  4084  041C  00A0               	movwf	??_isr
  4085  041D  0820               	movf	??_isr,w
  4086  041E  00D6               	movwf	_character
  4087  041F                     i1l190:	
  4088                           
  4089                           ;main.c: 466: if (pressed_time > 5000) character = 'K';
  4090  041F  3013               	movlw	19
  4091  0420  027C               	subwf	_pressed_time+1,w
  4092  0421  3089               	movlw	137
  4093  0422  1903               	skipnz
  4094  0423  027B               	subwf	_pressed_time,w
  4095  0424  1C03               	skipc
  4096  0425  2C2A               	goto	i1l191
  4097  0426  304B               	movlw	75
  4098  0427  00A0               	movwf	??_isr
  4099  0428  0820               	movf	??_isr,w
  4100  0429  00D6               	movwf	_character
  4101  042A                     i1l191:	
  4102                           
  4103                           ;main.c: 467: if (pressed_time > 7500) character = 'L';
  4104  042A  301D               	movlw	29
  4105  042B  027C               	subwf	_pressed_time+1,w
  4106  042C  304D               	movlw	77
  4107  042D  1903               	skipnz
  4108  042E  027B               	subwf	_pressed_time,w
  4109  042F  1C03               	skipc
  4110  0430  2C35               	goto	i1l1893
  4111  0431  304C               	movlw	76
  4112  0432  00A0               	movwf	??_isr
  4113  0433  0820               	movf	??_isr,w
  4114  0434  00D6               	movwf	_character
  4115  0435                     i1l1893:	
  4116                           
  4117                           ;main.c: 468: }
  4118                           ;main.c: 469: if (!PORTBbits.RB5)
  4119  0435  1A86               	btfsc	6,5	;volatile
  4120  0436  2C5C               	goto	i1l1903
  4121                           
  4122                           ;main.c: 470: {
  4123                           ;main.c: 471: character = '6';
  4124  0437  3036               	movlw	54
  4125  0438  00A0               	movwf	??_isr
  4126  0439  0820               	movf	??_isr,w
  4127  043A  00D6               	movwf	_character
  4128                           
  4129                           ;main.c: 472: if (pressed_time > 2500) character = 'M';
  4130  043B  3009               	movlw	9
  4131  043C  027C               	subwf	_pressed_time+1,w
  4132  043D  30C5               	movlw	197
  4133  043E  1903               	skipnz
  4134  043F  027B               	subwf	_pressed_time,w
  4135  0440  1C03               	skipc
  4136  0441  2C46               	goto	i1l194
  4137  0442  304D               	movlw	77
  4138  0443  00A0               	movwf	??_isr
  4139  0444  0820               	movf	??_isr,w
  4140  0445  00D6               	movwf	_character
  4141  0446                     i1l194:	
  4142                           
  4143                           ;main.c: 473: if (pressed_time > 5000) character = 'N';
  4144  0446  3013               	movlw	19
  4145  0447  027C               	subwf	_pressed_time+1,w
  4146  0448  3089               	movlw	137
  4147  0449  1903               	skipnz
  4148  044A  027B               	subwf	_pressed_time,w
  4149  044B  1C03               	skipc
  4150  044C  2C51               	goto	i1l195
  4151  044D  304E               	movlw	78
  4152  044E  00A0               	movwf	??_isr
  4153  044F  0820               	movf	??_isr,w
  4154  0450  00D6               	movwf	_character
  4155  0451                     i1l195:	
  4156                           
  4157                           ;main.c: 474: if (pressed_time > 7500) character = 'O';
  4158  0451  301D               	movlw	29
  4159  0452  027C               	subwf	_pressed_time+1,w
  4160  0453  304D               	movlw	77
  4161  0454  1903               	skipnz
  4162  0455  027B               	subwf	_pressed_time,w
  4163  0456  1C03               	skipc
  4164  0457  2C5C               	goto	i1l1903
  4165  0458  304F               	movlw	79
  4166  0459  00A0               	movwf	??_isr
  4167  045A  0820               	movf	??_isr,w
  4168  045B  00D6               	movwf	_character
  4169  045C                     i1l1903:	
  4170                           
  4171                           ;main.c: 475: }
  4172                           ;main.c: 476: if (!PORTBbits.RB4)
  4173  045C  1A06               	btfsc	6,4	;volatile
  4174  045D  2C62               	goto	i1l197
  4175                           
  4176                           ;main.c: 477: {
  4177                           ;main.c: 478: button_pressed = B;
  4178  045E  3004               	movlw	4
  4179  045F  00A0               	movwf	??_isr
  4180  0460  0820               	movf	??_isr,w
  4181  0461  00D5               	movwf	_button_pressed
  4182  0462                     i1l197:	
  4183                           
  4184                           ;main.c: 479: }
  4185                           ;main.c: 482: PORTB = 0b00001011;
  4186  0462  300B               	movlw	11
  4187  0463  0086               	movwf	6	;volatile
  4188                           
  4189                           ;main.c: 483: if (!PORTBbits.RB7)
  4190  0464  1B86               	btfsc	6,7	;volatile
  4191  0465  2C96               	goto	i1l1919
  4192                           
  4193                           ;main.c: 484: {
  4194                           ;main.c: 485: character = '7';
  4195  0466  3037               	movlw	55
  4196  0467  00A0               	movwf	??_isr
  4197  0468  0820               	movf	??_isr,w
  4198  0469  00D6               	movwf	_character
  4199                           
  4200                           ;main.c: 486: if (pressed_time > 2500) character = 'P';
  4201  046A  3009               	movlw	9
  4202  046B  027C               	subwf	_pressed_time+1,w
  4203  046C  30C5               	movlw	197
  4204  046D  1903               	skipnz
  4205  046E  027B               	subwf	_pressed_time,w
  4206  046F  1C03               	skipc
  4207  0470  2C75               	goto	i1l199
  4208  0471  3050               	movlw	80
  4209  0472  00A0               	movwf	??_isr
  4210  0473  0820               	movf	??_isr,w
  4211  0474  00D6               	movwf	_character
  4212  0475                     i1l199:	
  4213                           
  4214                           ;main.c: 487: if (pressed_time > 5000) character = 'Q';
  4215  0475  3013               	movlw	19
  4216  0476  027C               	subwf	_pressed_time+1,w
  4217  0477  3089               	movlw	137
  4218  0478  1903               	skipnz
  4219  0479  027B               	subwf	_pressed_time,w
  4220  047A  1C03               	skipc
  4221  047B  2C80               	goto	i1l200
  4222  047C  3051               	movlw	81
  4223  047D  00A0               	movwf	??_isr
  4224  047E  0820               	movf	??_isr,w
  4225  047F  00D6               	movwf	_character
  4226  0480                     i1l200:	
  4227                           
  4228                           ;main.c: 488: if (pressed_time > 7500) character = 'R';
  4229  0480  301D               	movlw	29
  4230  0481  027C               	subwf	_pressed_time+1,w
  4231  0482  304D               	movlw	77
  4232  0483  1903               	skipnz
  4233  0484  027B               	subwf	_pressed_time,w
  4234  0485  1C03               	skipc
  4235  0486  2C8B               	goto	i1l201
  4236  0487  3052               	movlw	82
  4237  0488  00A0               	movwf	??_isr
  4238  0489  0820               	movf	??_isr,w
  4239  048A  00D6               	movwf	_character
  4240  048B                     i1l201:	
  4241                           
  4242                           ;main.c: 489: if (pressed_time > 10000) character = 'S';
  4243  048B  3027               	movlw	39
  4244  048C  027C               	subwf	_pressed_time+1,w
  4245  048D  3011               	movlw	17
  4246  048E  1903               	skipnz
  4247  048F  027B               	subwf	_pressed_time,w
  4248  0490  1C03               	skipc
  4249  0491  2C96               	goto	i1l1919
  4250  0492  3053               	movlw	83
  4251  0493  00A0               	movwf	??_isr
  4252  0494  0820               	movf	??_isr,w
  4253  0495  00D6               	movwf	_character
  4254  0496                     i1l1919:	
  4255                           
  4256                           ;main.c: 490: }
  4257                           ;main.c: 491: if (!PORTBbits.RB6)
  4258  0496  1B06               	btfsc	6,6	;volatile
  4259  0497  2CBD               	goto	i1l1929
  4260                           
  4261                           ;main.c: 492: {
  4262                           ;main.c: 493: character = '8';
  4263  0498  3038               	movlw	56
  4264  0499  00A0               	movwf	??_isr
  4265  049A  0820               	movf	??_isr,w
  4266  049B  00D6               	movwf	_character
  4267                           
  4268                           ;main.c: 494: if (pressed_time > 2500) character = 'T';
  4269  049C  3009               	movlw	9
  4270  049D  027C               	subwf	_pressed_time+1,w
  4271  049E  30C5               	movlw	197
  4272  049F  1903               	skipnz
  4273  04A0  027B               	subwf	_pressed_time,w
  4274  04A1  1C03               	skipc
  4275  04A2  2CA7               	goto	i1l204
  4276  04A3  3054               	movlw	84
  4277  04A4  00A0               	movwf	??_isr
  4278  04A5  0820               	movf	??_isr,w
  4279  04A6  00D6               	movwf	_character
  4280  04A7                     i1l204:	
  4281                           
  4282                           ;main.c: 495: if (pressed_time > 5000) character = 'U';
  4283  04A7  3013               	movlw	19
  4284  04A8  027C               	subwf	_pressed_time+1,w
  4285  04A9  3089               	movlw	137
  4286  04AA  1903               	skipnz
  4287  04AB  027B               	subwf	_pressed_time,w
  4288  04AC  1C03               	skipc
  4289  04AD  2CB2               	goto	i1l205
  4290  04AE  3055               	movlw	85
  4291  04AF  00A0               	movwf	??_isr
  4292  04B0  0820               	movf	??_isr,w
  4293  04B1  00D6               	movwf	_character
  4294  04B2                     i1l205:	
  4295                           
  4296                           ;main.c: 496: if (pressed_time > 7500) character = 'V';
  4297  04B2  301D               	movlw	29
  4298  04B3  027C               	subwf	_pressed_time+1,w
  4299  04B4  304D               	movlw	77
  4300  04B5  1903               	skipnz
  4301  04B6  027B               	subwf	_pressed_time,w
  4302  04B7  1C03               	skipc
  4303  04B8  2CBD               	goto	i1l1929
  4304  04B9  3056               	movlw	86
  4305  04BA  00A0               	movwf	??_isr
  4306  04BB  0820               	movf	??_isr,w
  4307  04BC  00D6               	movwf	_character
  4308  04BD                     i1l1929:	
  4309                           
  4310                           ;main.c: 497: }
  4311                           ;main.c: 498: if (!PORTBbits.RB5)
  4312  04BD  1A86               	btfsc	6,5	;volatile
  4313  04BE  2CEF               	goto	i1l1941
  4314                           
  4315                           ;main.c: 499: {
  4316                           ;main.c: 500: character = '9';
  4317  04BF  3039               	movlw	57
  4318  04C0  00A0               	movwf	??_isr
  4319  04C1  0820               	movf	??_isr,w
  4320  04C2  00D6               	movwf	_character
  4321                           
  4322                           ;main.c: 501: if (pressed_time > 2500) character = 'W';
  4323  04C3  3009               	movlw	9
  4324  04C4  027C               	subwf	_pressed_time+1,w
  4325  04C5  30C5               	movlw	197
  4326  04C6  1903               	skipnz
  4327  04C7  027B               	subwf	_pressed_time,w
  4328  04C8  1C03               	skipc
  4329  04C9  2CCE               	goto	i1l208
  4330  04CA  3057               	movlw	87
  4331  04CB  00A0               	movwf	??_isr
  4332  04CC  0820               	movf	??_isr,w
  4333  04CD  00D6               	movwf	_character
  4334  04CE                     i1l208:	
  4335                           
  4336                           ;main.c: 502: if (pressed_time > 5000) character = 'X';
  4337  04CE  3013               	movlw	19
  4338  04CF  027C               	subwf	_pressed_time+1,w
  4339  04D0  3089               	movlw	137
  4340  04D1  1903               	skipnz
  4341  04D2  027B               	subwf	_pressed_time,w
  4342  04D3  1C03               	skipc
  4343  04D4  2CD9               	goto	i1l209
  4344  04D5  3058               	movlw	88
  4345  04D6  00A0               	movwf	??_isr
  4346  04D7  0820               	movf	??_isr,w
  4347  04D8  00D6               	movwf	_character
  4348  04D9                     i1l209:	
  4349                           
  4350                           ;main.c: 503: if (pressed_time > 7500) character = 'Y';
  4351  04D9  301D               	movlw	29
  4352  04DA  027C               	subwf	_pressed_time+1,w
  4353  04DB  304D               	movlw	77
  4354  04DC  1903               	skipnz
  4355  04DD  027B               	subwf	_pressed_time,w
  4356  04DE  1C03               	skipc
  4357  04DF  2CE4               	goto	i1l210
  4358  04E0  3059               	movlw	89
  4359  04E1  00A0               	movwf	??_isr
  4360  04E2  0820               	movf	??_isr,w
  4361  04E3  00D6               	movwf	_character
  4362  04E4                     i1l210:	
  4363                           
  4364                           ;main.c: 504: if (pressed_time > 10000) character = 'Z';
  4365  04E4  3027               	movlw	39
  4366  04E5  027C               	subwf	_pressed_time+1,w
  4367  04E6  3011               	movlw	17
  4368  04E7  1903               	skipnz
  4369  04E8  027B               	subwf	_pressed_time,w
  4370  04E9  1C03               	skipc
  4371  04EA  2CEF               	goto	i1l1941
  4372  04EB  305A               	movlw	90
  4373  04EC  00A0               	movwf	??_isr
  4374  04ED  0820               	movf	??_isr,w
  4375  04EE  00D6               	movwf	_character
  4376  04EF                     i1l1941:	
  4377                           
  4378                           ;main.c: 505: }
  4379                           ;main.c: 506: if (!PORTBbits.RB4)
  4380  04EF  1A06               	btfsc	6,4	;volatile
  4381  04F0  2CF5               	goto	i1l212
  4382                           
  4383                           ;main.c: 507: {
  4384                           ;main.c: 508: button_pressed = C;
  4385  04F1  3005               	movlw	5
  4386  04F2  00A0               	movwf	??_isr
  4387  04F3  0820               	movf	??_isr,w
  4388  04F4  00D5               	movwf	_button_pressed
  4389  04F5                     i1l212:	
  4390                           
  4391                           ;main.c: 509: }
  4392                           ;main.c: 512: PORTB = 0b00000111;
  4393  04F5  3007               	movlw	7
  4394  04F6  0086               	movwf	6	;volatile
  4395                           
  4396                           ;main.c: 513: if (!PORTBbits.RB7)
  4397  04F7  1B86               	btfsc	6,7	;volatile
  4398  04F8  2CFD               	goto	i1l1949
  4399                           
  4400                           ;main.c: 514: {
  4401                           ;main.c: 515: button_pressed = STAR;
  4402  04F9  3008               	movlw	8
  4403  04FA  00A0               	movwf	??_isr
  4404  04FB  0820               	movf	??_isr,w
  4405  04FC  00D5               	movwf	_button_pressed
  4406  04FD                     i1l1949:	
  4407                           
  4408                           ;main.c: 516: }
  4409                           ;main.c: 517: if (!PORTBbits.RB6)
  4410  04FD  1B06               	btfsc	6,6	;volatile
  4411  04FE  2D1B               	goto	i1l1959
  4412                           
  4413                           ;main.c: 518: {
  4414                           ;main.c: 519: character = '0';
  4415  04FF  3030               	movlw	48
  4416  0500  00A0               	movwf	??_isr
  4417  0501  0820               	movf	??_isr,w
  4418  0502  00D6               	movwf	_character
  4419                           
  4420                           ;main.c: 520: if (pressed_time > 2500) character = ' ';
  4421  0503  3009               	movlw	9
  4422  0504  027C               	subwf	_pressed_time+1,w
  4423  0505  30C5               	movlw	197
  4424  0506  1903               	skipnz
  4425  0507  027B               	subwf	_pressed_time,w
  4426  0508  1C03               	skipc
  4427  0509  2D0E               	goto	i1l215
  4428  050A  3020               	movlw	32
  4429  050B  00A0               	movwf	??_isr
  4430  050C  0820               	movf	??_isr,w
  4431  050D  00D6               	movwf	_character
  4432  050E                     i1l215:	
  4433                           
  4434                           ;main.c: 521: if (pressed_time > 5000)
  4435  050E  3013               	movlw	19
  4436  050F  027C               	subwf	_pressed_time+1,w
  4437  0510  3089               	movlw	137
  4438  0511  1903               	skipnz
  4439  0512  027B               	subwf	_pressed_time,w
  4440  0513  1C03               	skipc
  4441  0514  2D1B               	goto	i1l1959
  4442                           
  4443                           ;main.c: 522: {
  4444                           ;main.c: 523: character = '0';
  4445  0515  3030               	movlw	48
  4446  0516  00A0               	movwf	??_isr
  4447  0517  0820               	movf	??_isr,w
  4448  0518  00D6               	movwf	_character
  4449                           
  4450                           ;main.c: 524: pressed_time = 0;
  4451  0519  01FB               	clrf	_pressed_time
  4452  051A  01FC               	clrf	_pressed_time+1
  4453  051B                     i1l1959:	
  4454                           
  4455                           ;main.c: 525: }
  4456                           ;main.c: 526: }
  4457                           ;main.c: 527: if (!PORTBbits.RB5)
  4458  051B  1A86               	btfsc	6,5	;volatile
  4459  051C  2D21               	goto	i1l1963
  4460                           
  4461                           ;main.c: 528: {
  4462                           ;main.c: 529: button_pressed = HASH;
  4463  051D  3007               	movlw	7
  4464  051E  00A0               	movwf	??_isr
  4465  051F  0820               	movf	??_isr,w
  4466  0520  00D5               	movwf	_button_pressed
  4467  0521                     i1l1963:	
  4468                           
  4469                           ;main.c: 530: }
  4470                           ;main.c: 531: if (!PORTBbits.RB4)
  4471  0521  1A06               	btfsc	6,4	;volatile
  4472  0522  2D27               	goto	i1l218
  4473                           
  4474                           ;main.c: 532: {
  4475                           ;main.c: 533: button_pressed = D;
  4476  0523  3006               	movlw	6
  4477  0524  00A0               	movwf	??_isr
  4478  0525  0820               	movf	??_isr,w
  4479  0526  00D5               	movwf	_button_pressed
  4480  0527                     i1l218:	
  4481                           
  4482                           ;main.c: 534: }
  4483                           ;main.c: 535: PORTB = 0b00001111;
  4484  0527  300F               	movlw	15
  4485  0528  0086               	movwf	6	;volatile
  4486                           
  4487                           ;main.c: 536: PORTB = 0xF0;
  4488  0529  30F0               	movlw	240
  4489  052A  0086               	movwf	6	;volatile
  4490                           
  4491                           ;main.c: 537: PORTAbits.RA6 = 0;
  4492  052B  1305               	bcf	5,6	;volatile
  4493                           
  4494                           ;main.c: 539: INTCONbits.RBIF = 0;
  4495  052C  100B               	bcf	11,0	;volatile
  4496  052D                     i1l219:	
  4497  052D  0824               	movf	??_isr+4,w
  4498  052E  00FF               	movwf	127
  4499  052F  0823               	movf	??_isr+3,w
  4500  0530  008A               	movwf	10
  4501  0531  0822               	movf	??_isr+2,w
  4502  0532  0084               	movwf	4
  4503  0533  0E21               	swapf	(??_isr+1)^0,w
  4504  0534  0083               	movwf	3
  4505  0535  0EFE               	swapf	126,f
  4506  0536  0E7E               	swapf	126,w
  4507  0537  0009               	retfie
  4508  0538                     __end_of_isr:	
  4509                           
  4510                           	psect	intentry
  4511  0004                     __pintentry:	
  4512                           ;incstack = 0
  4513                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4514                           
  4515  0004                     interrupt_function:	
  4516  007E                     saved_w	set	btemp
  4517  0004  00FE               	movwf	btemp
  4518  0005  0E03               	swapf	3,w
  4519  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4520  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4521  0008  00A1               	movwf	??_isr+1
  4522  0009  0804               	movf	4,w
  4523  000A  00A2               	movwf	??_isr+2
  4524  000B  080A               	movf	10,w
  4525  000C  00A3               	movwf	??_isr+3
  4526  000D  087F               	movf	btemp+1,w
  4527  000E  00A4               	movwf	??_isr+4
  4528  000F  120A  118A  2AD6   	ljmp	_isr
  4529                           
  4530                           	psect	text17
  4531  07F3                     __ptext17:	
  4532 ;; *************** function _display *****************
  4533 ;; Defined at:
  4534 ;;		line 300 in file "main.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;  ch              1    wreg     unsigned char 
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;  ch              1   10[COMMON] unsigned char 
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  1    wreg      void 
  4541 ;; Registers used:
  4542 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4548 ;;      Params:         0       0       0       0       0
  4549 ;;      Locals:         1       0       0       0       0
  4550 ;;      Temps:          0       0       0       0       0
  4551 ;;      Totals:         1       0       0       0       0
  4552 ;;Total ram usage:        1 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    2
  4555 ;; This function calls:
  4556 ;;		_send_data
  4557 ;; This function is called by:
  4558 ;;		_isr
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           
  4563                           ;psect for function _display
  4564  07F3                     _display:	
  4565                           
  4566                           ;incstack = 0
  4567                           ; Regs used in _display: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4568                           ;display@ch stored from wreg
  4569  07F3  00FA               	movwf	display@ch
  4570                           
  4571                           ;main.c: 302: send_data(ch - 32);
  4572  07F4  087A               	movf	display@ch,w
  4573  07F5  3EE0               	addlw	224
  4574  07F6  120A  118A  27AA   	fcall	_send_data
  4575  07F9  0008               	return
  4576  07FA                     __end_of_display:	
  4577                           
  4578                           	psect	text18
  4579  07AA                     __ptext18:	
  4580 ;; *************** function _send_data *****************
  4581 ;; Defined at:
  4582 ;;		line 282 in file "main.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  rw              1    wreg     unsigned char 
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  rw              1    5[COMMON] unsigned char 
  4587 ;;  t               2    8[COMMON] unsigned int 
  4588 ;;  mask            2    6[COMMON] unsigned int 
  4589 ;;  flag            2    3[COMMON] unsigned int 
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  1    wreg      void 
  4592 ;; Registers used:
  4593 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4599 ;;      Params:         0       0       0       0       0
  4600 ;;      Locals:         7       0       0       0       0
  4601 ;;      Temps:          3       0       0       0       0
  4602 ;;      Totals:        10       0       0       0       0
  4603 ;;Total ram usage:       10 bytes
  4604 ;; Hardware stack levels used:    2
  4605 ;; This function calls:
  4606 ;;		Nothing
  4607 ;; This function is called by:
  4608 ;;		_display
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           
  4613                           ;psect for function _send_data
  4614  07AA                     _send_data:	
  4615                           
  4616                           ;incstack = 0
  4617                           ; Regs used in _send_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  4618                           ;send_data@rw stored from wreg
  4619  07AA  00F5               	movwf	send_data@rw
  4620                           
  4621                           ;main.c: 284: unsigned int mask, t, flag;
  4622                           ;main.c: 285: mask = 0x01;
  4623  07AB  3001               	movlw	1
  4624  07AC  00F6               	movwf	send_data@mask
  4625  07AD  3000               	movlw	0
  4626  07AE  00F7               	movwf	send_data@mask+1
  4627                           
  4628                           ;main.c: 286: for (t = 0; t < 16; t++)
  4629  07AF  01F8               	clrf	send_data@t
  4630  07B0  01F9               	clrf	send_data@t+1
  4631  07B1  3000               	movlw	0
  4632  07B2  0279               	subwf	send_data@t+1,w
  4633  07B3  3010               	movlw	16
  4634  07B4  1903               	skipnz
  4635  07B5  0278               	subwf	send_data@t,w
  4636  07B6  1803               	btfsc	3,0
  4637  07B7  2FEE               	goto	i1l128
  4638  07B8                     i1l1561:	
  4639                           
  4640                           ;main.c: 287: {
  4641                           ;main.c: 288: flag = CHAR_DATA[rw] & mask;
  4642  07B8  0875               	movf	send_data@rw,w
  4643  07B9  00F0               	movwf	??_send_data
  4644  07BA  0770               	addwf	??_send_data,w
  4645  07BB  3E01               	addlw	low ((_CHAR_DATA-__stringbase)| (0+32768))
  4646  07BC  0084               	movwf	4
  4647  07BD  120A  118A  2600  120A  118A  	fcall	stringdir
  4648  07C2  00F1               	movwf	??_send_data+1
  4649  07C3  120A  118A  2600  120A  118A  	fcall	stringdir
  4650  07C8  00F2               	movwf	??_send_data+2
  4651  07C9  0876               	movf	send_data@mask,w
  4652  07CA  0571               	andwf	??_send_data+1,w
  4653  07CB  00F3               	movwf	send_data@flag
  4654  07CC  0877               	movf	send_data@mask+1,w
  4655  07CD  0572               	andwf	??_send_data+2,w
  4656  07CE  00F4               	movwf	send_data@flag+1
  4657                           
  4658                           ;main.c: 289: if (flag == 0) PORTCbits.RC0 = 0;
  4659  07CF  0873               	movf	send_data@flag,w
  4660  07D0  0474               	iorwf	send_data@flag+1,w
  4661  07D1  1D03               	btfss	3,2
  4662  07D2  2FD7               	goto	i1l129
  4663  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  4664  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  4665  07D5  1007               	bcf	7,0	;volatile
  4666  07D6  2FDA               	goto	i1l130
  4667  07D7                     i1l129:	
  4668                           
  4669                           ;main.c: 290: else PORTCbits.RC0 = 1;
  4670  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  4671  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  4672  07D9  1407               	bsf	7,0	;volatile
  4673  07DA                     i1l130:	
  4674                           
  4675                           ;main.c: 291: PORTCbits.RC1 = 1;
  4676  07DA  1487               	bsf	7,1	;volatile
  4677                           
  4678                           ;main.c: 292: PORTCbits.RC1 = 0;
  4679  07DB  1087               	bcf	7,1	;volatile
  4680                           
  4681                           ;main.c: 293: mask = mask << 1;
  4682  07DC  1003               	clrc
  4683  07DD  0D76               	rlf	send_data@mask,w
  4684  07DE  00F6               	movwf	send_data@mask
  4685  07DF  0D77               	rlf	send_data@mask+1,w
  4686  07E0  00F7               	movwf	send_data@mask+1
  4687  07E1  3001               	movlw	1
  4688  07E2  07F8               	addwf	send_data@t,f
  4689  07E3  1803               	skipnc
  4690  07E4  0AF9               	incf	send_data@t+1,f
  4691  07E5  3000               	movlw	0
  4692  07E6  07F9               	addwf	send_data@t+1,f
  4693  07E7  3000               	movlw	0
  4694  07E8  0279               	subwf	send_data@t+1,w
  4695  07E9  3010               	movlw	16
  4696  07EA  1903               	skipnz
  4697  07EB  0278               	subwf	send_data@t,w
  4698  07EC  1C03               	skipc
  4699  07ED  2FB8               	goto	i1l1561
  4700  07EE                     i1l128:	
  4701                           
  4702                           ;main.c: 294: }
  4703                           ;main.c: 296: PORTCbits.RC2 = 1;
  4704  07EE  1283               	bcf	3,5	;RP0=0, select bank0
  4705  07EF  1303               	bcf	3,6	;RP1=0, select bank0
  4706  07F0  1507               	bsf	7,2	;volatile
  4707                           
  4708                           ;main.c: 297: PORTCbits.RC2 = 0;
  4709  07F1  1107               	bcf	7,2	;volatile
  4710  07F2  0008               	return
  4711  07F3                     __end_of_send_data:	
  4712  007E                     btemp	set	126	;btemp
  4713  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    128
    Data        131
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     46      65
    BANK1            80      0      80
    BANK3            96      0      35
    BANK2            96      0       0

Pointer List with Targets:

    strncpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> greeting_message(BANK3[35]), message(BANK1[80]), 

    strncpy@to	PTR unsigned char  size(1) Largest target is 7
		 -> buffer(BANK0[7]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 7
		 -> buffer(BANK0[7]), 

    strncat@from	PTR const unsigned char  size(1) Largest target is 5
		 -> main@blank(BANK0[5]), 

    strncat@to	PTR unsigned char  size(1) Largest target is 80
		 -> message(BANK1[80]), 

    strncat@cp	PTR unsigned char  size(1) Largest target is 80
		 -> message(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> greeting_message(BANK3[35]), buffer(BANK0[7]), message(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> greeting_message(BANK3[35]), buffer(BANK0[7]), message(BANK1[80]), 

    sp__strncat	PTR unsigned char  size(1) Largest target is 80
		 -> message(BANK1[80]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 7
		 -> buffer(BANK0[7]), 

    left_rotate@arr	PTR unsigned char  size(2) Largest target is 80
		 -> greeting_message(BANK3[35]), buffer(BANK0[7]), message(BANK1[80]), 

    left_rotate_by_one@arr	PTR unsigned char  size(2) Largest target is 80
		 -> greeting_message(BANK3[35]), buffer(BANK0[7]), message(BANK1[80]), 

    rTrim@str	PTR unsigned char  size(1) Largest target is 80
		 -> message(BANK1[80]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_display
    _display->_send_data

Critical Paths under _main in BANK0

    _main->_left_rotate
    _save_in_eeprom->_clear
    _clear->_strlen
    _read_eeprom->_eeprom_read
    _left_rotate->_left_rotate_by_one
    _control_speed->_delay

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0    5537
                                             30 BANK0     16    16      0
               _choose_digit_display
                              _clear
                      _control_speed
                               _init
                        _left_rotate
                              _rTrim
                        _read_eeprom
                     _save_in_eeprom
                             _strlen
                            _strncat
                            _strncpy
 ---------------------------------------------------------------------------------
 (1) _strncpy                                              9     5      4     615
                                              5 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _strncat                                              6     3      3     564
                                              5 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _save_in_eeprom                                       6     6      0    1475
                                             18 BANK0      6     6      0
                              _clear
                              _delay
                       _eeprom_write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _eeprom_write                                         3     2      1     150
                                              5 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _clear                                                7     7      0     651
                                             11 BANK0      7     7      0
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               6     4      2     514
                                              5 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _read_eeprom                                          5     5      0     136
                                              7 BANK0      5     5      0
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          2     2      0      22
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _rTrim                                                6     6      0     299
                                              5 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _left_rotate                                          9     3      6    1055
                                             21 BANK0      9     3      6
                 _left_rotate_by_one
 ---------------------------------------------------------------------------------
 (2) _left_rotate_by_one                                  16    12      4     329
                                              5 BANK0     16    12      4
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _control_speed                                        0     0      0      24
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                3     3      0      24
                                              5 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _choose_digit_display                                 2     2      0      44
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0     159
                                              0 BANK0      5     5      0
                            _display
 ---------------------------------------------------------------------------------
 (5) _display                                              1     1      0     159
                                             10 COMMON     1     1      0
                          _send_data
 ---------------------------------------------------------------------------------
 (7) _send_data                                           10    10      0     137
                                              0 COMMON    10    10      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _choose_digit_display
   _clear
     _strlen
   _control_speed
     _delay
   _init
   _left_rotate
     _left_rotate_by_one
   _rTrim
   _read_eeprom
     _eeprom_read
   _save_in_eeprom
     _clear
       _strlen
     _delay
     _eeprom_write
     _strlen
   _strlen
   _strncat
   _strncpy

 _isr (ROOT)
   _display
     _send_data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      23       9       36.5%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2E      41       5       81.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      C2      12        0.0%
ABS                  0      0      C2       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Dec 01 13:10:32 2017

                            pc 0002                    __CFG_CP$OFF 0000                             l81 0F70  
                           l97 0DBD         __size_of_control_speed 0042                             _RD 0C60  
                           _WR 0C61                             fsr 0004                            l243 0168  
                          l245 01C8                            l246 01E2                            l291 05D2  
                          l269 0E25                            _GIE 005F                            _PR2 0092  
                 __CFG_CPD$OFF 0000                            _isr 02D6                            fsr0 0004  
                          indf 0000                   __CFG_IESO$ON 0000         main@message_length_340 004C  
       main@message_length_339 004A                   __CFG_LVP$OFF 0000                           l2011 00C8  
                         l2021 00DB                           l2005 008A                           l2111 020A  
                         l2113 0239                           l2009 00C4                           l2061 0139  
                         l2053 0125                           l2045 0111                           l2037 00FD  
                         l2029 00EB                           l1511 0753                           l1503 0732  
                         l2119 0244                           l2137 0265                           l2145 029F  
                         l2081 0162                           l2139 0294                           l2083 018A  
                         l1509 0736                           l1703 0FF9                           l1551 06DE  
                         l1713 0E7D                           l1705 0FFC                           l1481 0DEC  
                         l1731 0FA9                           l1549 0696                           l1581 0F77  
                         l1741 0ED7                           l1479 0DDF                           l1647 0559  
                         l1743 0EE2                           l1735 0FB1                           l1681 0E47  
                         l1673 0EAA                           l1497 0717                           l1649 058A  
                         l1753 0EFF                           l1729 0F86                           l1579 0F47  
                         l1693 0FDB                           l1749 0EF0                           l1695 0FDE  
                         l1983 0070                           l1975 005E                           l1993 0090  
                         l1979 0064                           ?_isr 0070                           u1401 0E23  
                         _IOCB 0096                           u1335 0715                           u1345 0730  
                         u1435 06A8                           u1355 0740                           u1365 0DC7  
                         u1525 0560                           u1535 0EB1                           u1545 0E51  
                         u1565 0FD3                           u1585 0FF1                           u2637 057D  
                         u2647 0590                           u2657 0DCD                           _TMR0 0001  
                         _TMR2 0011                           _WREN 0C62                           _WPUB 0095  
               ??_eeprom_write 0026                   __CFG_WRT$OFF 0000                  __CFG_FCMEN$ON 0000  
                         _main 0046                           _init 0F07                           btemp 007E  
                __CFG_BOREN$ON 0000                           start 0012                   ?_left_rotate 0035  
      __size_of_save_in_eeprom 0097                          ??_isr 0020                          ?_main 0070  
                        ?_init 0070                          _EEADR 010D                  __CFG_WDTE$OFF 0000  
                        _CARRY 0018                          _ANSEL 0188                          _T2CON 0012  
                        i1l200 0480                          i1l201 048B                          i1l130 07DA  
                        i1l210 04E4                          i1l212 04F5                          i1l204 04A7  
                        i1l205 04B2                          i1l215 050E                          i1l151 036A  
                        i1l128 07EE                          i1l208 04CE                          i1l160 0303  
                        i1l129 07D7                          i1l209 04D9                          i1l153 02DC  
                        i1l218 0527                          i1l219 052D                          i1l163 0317  
                        i1l180 03BE                          i1l181 03C9                          i1l157 02F0  
                        i1l190 041F                          i1l166 032B                          i1l191 042A  
                        i1l183 03E5                          i1l176 0397                          i1l177 03A2  
                        i1l169 0342                          i1l194 0446                          i1l186 03F8  
                        i1l195 0451                          i1l187 0403                          i1l197 0462  
                        i1l199 0475                          _PORTA 0005                          _PORTB 0006  
                        _TRISA 0085                          _TRISB 0086                          _TRISC 0087  
__size_of_choose_digit_display 0030                   ?_read_eeprom 0070                __end_of_display 07FA  
                        _delay 0DB9                          _clear 06F7                          _rTrim 0F42  
                        _index 005E                          _speed 0053                  _control_speed 0FBE  
                        pclath 000A              __end_of_CHAR_DATA 0686                          status 0003  
                        wtemp0 007E                __end_of_strncat 0F07                __end_of_strncpy 0FBE  
               __CFG_MCLRE$OFF 0000                __initialization 0015      read_eeprom@message_length 0029  
                 __end_of_main 02D6                   __end_of_init 0F42                save_in_eeprom@j 0036  
                       ??_main 003E                         ??_init 0025                         ?_delay 0070  
                       ?_clear 0070                         ?_rTrim 0070                 ?_control_speed 0070  
          clear@message_length 002C                         _EEDATA 010C                         _EECON1 018C  
                       _EECON2 018D                         _ANSELH 0189                         i1l1561 07B8  
                       i1l1903 045C                         i1l1841 037E                         i1l1809 0332  
                       i1l1819 0349                         i1l1827 0356                         i1l1941 04EF  
                       i1l1919 0496                         i1l1847 0386                         i1l1929 04BD  
                       i1l1857 03AD                         i1l1769 02E2                         i1l1963 0521  
                       i1l1883 040E                         i1l1867 03D4                         i1l1779 02F6  
                       i1l1949 04FD                         i1l1893 0435                         i1l1789 030A  
                       i1l1959 051B                         i1l1799 031E             save_in_eeprom@temp 0034  
                       _TMR2IF 0061                 __CFG_PWRTE$OFF 0000           __size_of_eeprom_read 0024  
  __size_of_left_rotate_by_one 0071          left_rotate_by_one@arr 0025                         _buffer 0057  
                       _cursor 007D                         delay@i 0026                         clear@m 0030  
                       clear@n 002E           __end_of_eeprom_write 05FF                         _strlen 0DD9  
                    ??_display 007A                         rTrim@i 0028                         saved_w 007E  
                    ??_strncat 0028                      ??_strncpy 0029        __end_of__initialization 0042  
              eeprom_read@addr 0026                 left_rotate@arr 0035                 _save_in_eeprom 0538  
               __pcstackCOMMON 0070           __size_of_left_rotate 0028                   __pidataBANK0 0D98  
                 __pidataBANK1 075A                   __pidataBANK3 0DFC                  __end_of_delay 0DD9  
                __end_of_clear 075A                  __end_of_rTrim 0F7F                ??_control_speed 0028  
            eeprom_write@value 0025                        ??_delay 0025                        ??_clear 002B  
                      ??_rTrim 0025           __size_of_read_eeprom 0035                     __pbssBANK0 005E  
           main@message_length 0046                   left_rotate@d 0037                   left_rotate@k 003C  
                 left_rotate@n 0039         __end_of_save_in_eeprom 05CF                     __pmaintext 0046  
                   __pintentry 0004             __size_of_send_data 0049                        ?_strlen 0025  
                  send_data@rw 0075                     __stringtab 0600   save_in_eeprom@message_length 0035  
              ?_save_in_eeprom 0070   __end_of_choose_digit_display 0E9B                      _CHAR_DATA 0606  
        choose_digit_display@n 0026          __size_of_eeprom_write 0030         left_rotate_by_one@temp 0031  
                      __ptext1 0F7F                        __ptext2 0ED0                        __ptext3 0538  
                      __ptext4 05CF                        __ptext5 06F7                        __ptext6 0DD9  
                      __ptext7 0E9B                        __ptext8 0E1F                        __ptext9 0F42  
                      _display 07F3                __size_of_strlen 0023                      _T2CONbits 0012  
                 __size_of_isr 0262                        _message 00A0                        _strncat 0ED0  
                      _strncpy 0F7F           end_of_initialization 0042              __end_of_send_data 07F3  
                 _eeprom_write 05CF                   read_eeprom@j 002A                  send_data@flag 0073  
                send_data@mask 0076                        strlen@s 0025                      _PORTAbits 0005  
                    _PORTBbits 0006                      _PORTCbits 0007                   _display_flag 0060  
                ??_eeprom_read 0025     __end_of_left_rotate_by_one 06F7                     rTrim@index 0026  
          left_rotate_by_one@j 0033            left_rotate_by_one@n 0027                 __end_of_strlen 0DFC  
          start_initialization 0015           _choose_digit_display 0E6B                    __end_of_isr 0538  
     __CFG_FOSC$INTRC_NOCLKOUT 0000                  ??_left_rotate 003B               _greeting_message 0190  
          __end_of_eeprom_read 0E43                     init_fetch0 0DA8                    __pdataBANK0 004E  
                  __pdataBANK1 00A0                    __pdataBANK3 0190                       ??_strlen 0027  
        ?_choose_digit_display 0070                    __pbssCOMMON 007B                  ??_read_eeprom 0027  
                    ___latbits 0002                  __pcstackBANK0 0020          __end_of_control_speed 1000  
             ??_save_in_eeprom 0032               eeprom_write@addr 0027                 _button_pressed 0055  
                    _character 0056              main@buffer_length 0048            __end_of_left_rotate 0E6B  
                    __pstrings 0600                     send_data@t 0078                       ?_display 0070  
               __size_of_delay 0020                 __size_of_clear 0063                    strncat@from 0025  
               __size_of_rTrim 003D                    strncat@size 0026                       ?_strncat 0025  
                     ?_strncpy 0025            __end_of_read_eeprom 0ED0              interrupt_function 0004  
                  strncpy@from 0025                    _eeprom_read 0E1F                      _send_data 07AA  
                  strncpy@size 0027                read_eeprom@temp 0028                       _PIR1bits 000C  
                    main@F1918 004E                    __stringbase 0605         ??_choose_digit_display 0025  
                    main@blank 0041                      display@ch 007A                     ?_send_data 0070  
                  _left_rotate 0E43             _left_rotate_by_one 0686             __end_of__stringtab 0606  
             __size_of_display 0007            ?_left_rotate_by_one 0025                    _read_eeprom 0E9B  
                     __ptext10 0E43                       __ptext11 0686                       __ptext12 0F07  
                     __ptext13 0FBE                       __ptext14 0DB9                       __ptext15 0E6B  
                     __ptext16 02D6                       __ptext17 07F3                       __ptext18 07AA  
            __CFG_BOR4V$BOR40V 0000               __size_of_strncat 0037               __size_of_strncpy 003F  
                __size_of_main 0290                  __size_of_init 003B           ??_left_rotate_by_one 0029  
                     rTrim@str 002A                     _INTCONbits 000B                       init_ram0 0DAC  
                     intlevel1 0000                    ??_send_data 0070                      strncat@cp 002A  
                    strncat@to 0029                      stringcode 0600                      strncpy@cp 002C  
                    strncpy@to 002D                   _pressed_time 007B                     _OPTION_REG 0081  
                     strlen@cp 0029                       stringdir 0600                       stringtab 0600  
                ?_eeprom_write 0025                   ?_eeprom_read 0070  
